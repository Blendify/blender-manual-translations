# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.78 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-09 15:10+1100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../manual/render/cycles/materials/surface.rst:5
msgid "Surface"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:7
msgid ""
"The surface shader defines the light interaction at the surface of the "
"mesh. One or more :abbr:`BSDF (Bidirectional scattering distribution "
"function)`'s specify if incoming light is reflected back, refracted into "
"the mesh, or absorbed."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:11
msgid ""
"Emission defines how light is emitted from the surface, allowing any "
"surface to become a light source."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:16
msgid "Terminology"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:19
msgid "BSDF"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:19
msgid ""
"stands for bidirectional scattering distribution function. It defines how"
" light is reflected and refracted at a surface."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:22
msgid "Reflection"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:22
msgid ""
":abbr:`BSDF (Bidirectional scattering distribution function)`\\ s reflect"
" an incoming ray on the same side of the surface."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:25
msgid "Transmission"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:25
msgid ""
":abbr:`BSDF (Bidirectional scattering distribution function)`\\ s "
"transmit an incoming ray through the surface, leaving on the other side."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:30
msgid "Refraction"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:28
msgid ""
":abbr:`BSDF (Bidirectional scattering distribution function)`\\ s are a "
"type of *Transmission*, transmitting an incoming ray and changing its "
"direction as it exits on the other side of the surface."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:33
msgid "BSDF Parameters"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:35
msgid ""
"A major difference from non-physically based renderers is that direct "
"light reflection from lamps and indirect light reflection of other "
"surfaces are not decoupled, but rather handled using a single :abbr:`BSDF"
" (Bidirectional scattering distribution function)`. This limits the "
"possibilities a bit, but we believe overall it is helpful in creating "
"consistent-looking renders with fewer parameters to tune."
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:57
msgid "Roughness"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:42
msgid ""
"For the glossy :abbr:`BSDF (Bidirectional scattering distribution "
"function)`\\ s, the *roughness* parameter controls the sharpness of the "
"reflection, from 0.0 (perfectly sharp) to 1.0 (very soft). Compared to "
"*hardness* or *exponent* parameters, it has the advantage of being in the"
" range 0.0 to 1.0, and as a result gives more linear control and is more "
"easily textureable. The relation is roughly: *roughness* = 1 - "
"1/*hardness*"
msgstr ""

#: ../../manual/render/cycles/materials/surface.rst:51
msgid ""
"Currently Blender is coded to use an unsquared model. So if you are using"
" a :term:`Roughness Map` chances are that the result will not be "
"accurate. To fix this, you can square the texture by connecting the "
"texture to a :doc:`Math node </render/cycles/nodes/types/converter/math>`"
" and either setting it to *Multiply* and inputing the texture in both "
"input sockets, or using the *Power* function and setting the second input"
" to 2."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chanches "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/cycles/nodes/types/converter/math>` and either"
#~ " setting it to *Multiply* and "
#~ "inputing the texture in both input "
#~ "sockets, or use the *Power* function "
#~ "and setting the second input to 2."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` s reflect an incoming ray"
#~ " on the same side of the "
#~ "surface."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` s transmit an incoming "
#~ "ray through the surface, leaving on "
#~ "the other side."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` s are a type of "
#~ "*Transmission*, transmitting an incoming ray"
#~ " and changing its direction as it "
#~ "exits on the other side of the "
#~ "surface."
#~ msgstr ""

#~ msgid ""
#~ "For the glossy :abbr:`BSDF (Bidirectional "
#~ "scattering distribution function)` s, the "
#~ "*roughness* parameter controls the sharpness"
#~ " of the reflection, from 0.0 "
#~ "(perfectly sharp) to 1.0 (very soft)."
#~ " Compared to *hardness* or *exponent* "
#~ "parameters, it has the advantage of "
#~ "being in the range 0.0..1.0, and "
#~ "as a result gives more linear "
#~ "control and is more easily textureable."
#~ " The relation is roughly: *roughness* "
#~ "= 1 - 1/*hardness*"
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chances "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/cycles/nodes/types/converter/math>` and either"
#~ " setting it to *Multiply* and "
#~ "inputing the texture in both input "
#~ "sockets, or use the *Power* function "
#~ "and setting the second input to 2."
#~ msgstr ""

#~ msgid ""
#~ "For the glossy :abbr:`BSDF (Bidirectional "
#~ "scattering distribution function)`\\ s, the"
#~ " *roughness* parameter controls the "
#~ "sharpness of the reflection, from 0.0"
#~ " (perfectly sharp) to 1.0 (very "
#~ "soft). Compared to *hardness* or "
#~ "*exponent* parameters, it has the "
#~ "advantage of being in the range "
#~ "0.0..1.0, and as a result gives "
#~ "more linear control and is more "
#~ "easily textureable. The relation is "
#~ "roughly: *roughness* = 1 - 1/*hardness*"
#~ msgstr ""

