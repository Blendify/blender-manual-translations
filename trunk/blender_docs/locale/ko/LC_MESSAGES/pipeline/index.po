# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.78 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-06-02 17:35-0400\n"
"PO-Revision-Date: 2018-12-03 17:24+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.2\n"

#: ../../manual/pipeline/index.rst:5
msgid "Pipeline"
msgstr "작업 파이프라인(pipeline)"

#: ../../manual/pipeline/index.rst:7
msgid "This section of the manual focuses on the integration of Blender into a production pipeline. This is a vast topic that covers many areas of the software, but here we will focus on file/asset management and data I/O."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Output file or a directory when multiple inputs are passed"
#~ msgstr ""

#~ msgid "Follow all dependencies (unused indirect dependencies too)"
#~ msgstr ""

#~ msgid "Suppress status output"
#~ msgstr ""

#~ msgid "Report external libraries errors (missing paths)"
#~ msgstr ""

#~ msgid "blendfile packing"
#~ msgstr ""

#~ msgid "automatic dependencies remapping"
#~ msgstr ""

#~ msgid ""
#~ "This command is used for packing a"
#~ " ``.blend`` file and *all* its "
#~ "dependencies into a ``.zip`` file for"
#~ " redistribution."
#~ msgstr ""

#~ msgid "Remap blend file paths"
#~ msgstr ""

#~ msgid "This command is a 3 step process:"
#~ msgstr ""

#~ msgid ""
#~ "first run ``bam remap start .`` "
#~ "which stores the current state of "
#~ "your project (recursively)."
#~ msgstr ""

#~ msgid "then re-arrange the files on the filesystem (rename, relocate)."
#~ msgstr ""

#~ msgid ""
#~ "finally run ``bam remap finish`` to "
#~ "apply the changes, updating the "
#~ "``.blend`` files internal paths."
#~ msgstr ""

#~ msgid "Start remapping the blend files"
#~ msgstr ""

#~ msgid "Generate JSON output"
#~ msgstr ""

#~ msgid "Finish remapping the blend files"
#~ msgstr ""

#~ msgid ""
#~ "Make all remapped paths relative (even"
#~ " if they were originally absolute)"
#~ msgstr ""

#~ msgid "Just print output as if the paths are being run"
#~ msgstr ""

#~ msgid "Cancel path remapping"
#~ msgstr ""

#~ msgid ""
#~ "The tools and workflows documented here"
#~ " require familiarity with working with "
#~ "a command line interface and are "
#~ "mostly aimed at TDs and technical "
#~ "users."
#~ msgstr ""

#~ msgid "BAM Asset Manager"
#~ msgstr ""

#~ msgid ""
#~ "Refactoring linked .blend files is a "
#~ "common practice in a production "
#~ "environment. While some basic operations "
#~ "can be accomplished within Blender, "
#~ "sometimes it is more practical to "
#~ "perform them on the command line "
#~ "or via a script. During the "
#~ "production of Cosmos Laundromat (Gooseberry"
#~ " Open Movie Project) the *BAM Asset"
#~ " Manager* (BAM) was developed. The "
#~ "original scope of BAM included "
#~ "client-server asset management tools going"
#~ " beyond Blender, but it was later "
#~ "refocused on core utilities to perform"
#~ " two operations:"
#~ msgstr ""

#~ msgid "Blend-file packing"
#~ msgstr ""

#~ msgid "Automatic dependencies remapping"
#~ msgstr ""

#~ msgid "The following section of the manual focuses on how to use BAM."
#~ msgstr ""

#~ msgid "Installing BAM"
#~ msgstr ""

#~ msgid ""
#~ "BAM is a standalone Python package, "
#~ "that can be run on any system "
#~ "without any particular configuration. The "
#~ "only requirement is Python 3 (and "
#~ "pip, the Python package manager, to "
#~ "easily install BAM)."
#~ msgstr ""

#~ msgid ""
#~ "Windows, Linux and macOS provide "
#~ "different ways to install Python 3 "
#~ "and pip. Check out the online docs"
#~ " to learn more about a specific "
#~ "platform."
#~ msgstr ""

#~ msgid ""
#~ "Once Python 3 and pip are "
#~ "available, BAM can be installed via "
#~ "command line by typing:"
#~ msgstr ""

#~ msgid ""
#~ "After a successful installation, the "
#~ "`bam` command will be available. By "
#~ "typing it and pressing the Enter "
#~ "key, all the available subcommands will"
#~ " be displayed."
#~ msgstr ""

#~ msgid "bam pack"
#~ msgstr ""

#~ msgid ""
#~ "This command is used for packing a"
#~ " ``.blend`` file and *all* its "
#~ "dependencies into a ``.zip`` file for"
#~ " redistribution. ::"
#~ msgstr ""

#~ msgid ""
#~ "You can simply pack a blend file"
#~ " like this to create a zip-file"
#~ " of the same name."
#~ msgstr ""

#~ msgid ""
#~ "You may also want to give an "
#~ "explicit output directory. The example "
#~ "shows how to pack a blend with "
#~ "maximum compression for online downloads"
#~ msgstr ""

#~ msgid ""
#~ "The command provides several options to"
#~ " adapt to different workflows (final "
#~ "distribution, partial extraction, rendering)."
#~ msgstr ""

#~ msgid "``-o``, ``--output`` ``<FILE>``"
#~ msgstr ""

#~ msgid "Output file or a directory when multiple inputs are passed."
#~ msgstr ""

#~ msgid "``-m``, ``--mode`` ``<MODE>``"
#~ msgstr ""

#~ msgid ""
#~ "Output file or a directory when "
#~ "multiple inputs are passed. Possible "
#~ "choices: ``ZIP``, ``FILE``."
#~ msgstr ""

#~ msgid "``-e``, ``--exclude`` ``<PATTERN(S)>``"
#~ msgstr ""

#~ msgid "Optionally exclude files from the pack."
#~ msgstr ""

#~ msgid "``--exclude=\"*.png\"``"
#~ msgstr ""

#~ msgid "Using Unix shell-style wildcards *(case insensitive)*."
#~ msgstr ""

#~ msgid "``--exclude=\"*.txt;*.avi;*.wav\"``"
#~ msgstr ""

#~ msgid "Multiple patterns can be passed using the ``;`` separator."
#~ msgstr ""

#~ msgid "``-a``, ``--all-deps``"
#~ msgstr ""

#~ msgid "Follow all dependencies (unused indirect dependencies too)."
#~ msgstr ""

#~ msgid "``-q``, ``--quiet``"
#~ msgstr ""

#~ msgid "Suppress status output."
#~ msgstr ""

#~ msgid "``-c``, ``--compress`` ``<LEVEL>``"
#~ msgstr ""

#~ msgid ""
#~ "Compression level for resulting archive. "
#~ "Possible choices: ``default``, ``fast``, "
#~ "``best``, ``store``."
#~ msgstr ""

#~ msgid "``--repo`` ``<DIR PATH>``"
#~ msgstr ""

#~ msgid ""
#~ "Specify a \"root\" path from where "
#~ "to pack the selected file. This "
#~ "allows for the creation of a "
#~ "sparse copy of the production tree, "
#~ "without any remapping."
#~ msgstr ""

#~ msgid "``--warn-external``"
#~ msgstr ""

#~ msgid "Report external libraries errors (missing paths)."
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid ""
#~ "Consider the following directory layout, "
#~ "and in particular the file "
#~ "*01_01_A.lighting.blend* with its linked "
#~ "libraries."
#~ msgstr ""

#~ msgid ""
#~ "Once we run ``bam pack "
#~ "/scenes/01-opening/01_01_A.lighting.blend`` we obtain "
#~ "a *01_01_A.lighting.zip* inside of which "
#~ "we find the following structure."
#~ msgstr ""

#~ msgid ""
#~ "Note how all paths have been "
#~ "remapped relative to the placement of"
#~ " *01_01_A.lighting.blend* in the root of"
#~ " the output. If we run ``bam "
#~ "pack /scenes/01-opening/01_01_A.lighting.blend --repo "
#~ "~/agent327``, the output will be "
#~ "different."
#~ msgstr ""

#~ msgid ""
#~ "In this case no path is remapped,"
#~ " and we simply strip out any "
#~ "file that is not referenced as a"
#~ " direct or indirect dependency of "
#~ "*01_01_A.lighting.blend*. This is effectively "
#~ "a sparse copy of the original "
#~ "production tree."
#~ msgstr ""

#~ msgid "bam remap"
#~ msgstr ""

#~ msgid "Remap blend file paths::"
#~ msgstr ""

#~ msgid "This command is a three step process:"
#~ msgstr ""

#~ msgid ""
#~ "First run ``bam remap start .`` "
#~ "which stores the current state of "
#~ "your project (recursively)."
#~ msgstr ""

#~ msgid "Then re-arrange the files on the filesystem (rename, relocate)."
#~ msgstr ""

#~ msgid ""
#~ "Finally run ``bam remap finish`` to "
#~ "apply the changes, updating the "
#~ "``.blend`` files internal paths."
#~ msgstr ""

#~ msgid ""
#~ "Remapping creates a file called "
#~ "``bam_remap.data`` in the current directory."
#~ " You can relocate the entire project"
#~ " to a new location but on "
#~ "executing ``finish``, this file must be"
#~ " accessible from the current directory."
#~ msgstr ""

#~ msgid ""
#~ "This command depends on files unique "
#~ "contents, take care not to modify "
#~ "the files once remap is started."
#~ msgstr ""

#~ msgid "Subcommands"
#~ msgstr ""

#~ msgid "remap start"
#~ msgstr ""

#~ msgid "Start remapping the blend files::"
#~ msgstr ""

#~ msgid "``-j``, ``--json``"
#~ msgstr ""

#~ msgid "Generate JSON output."
#~ msgstr ""

#~ msgid "remap finish"
#~ msgstr ""

#~ msgid "Finish remapping the blend files::"
#~ msgstr ""

#~ msgid "``-r``, ``--force-relative``"
#~ msgstr ""

#~ msgid ""
#~ "Make all remapped paths relative (even"
#~ " if they were originally absolute)."
#~ msgstr ""

#~ msgid "``-d``, ``--dry-run``"
#~ msgstr ""

#~ msgid "Just print output as if the paths are being run."
#~ msgstr ""

#~ msgid "remap reset"
#~ msgstr ""

#~ msgid "Cancel path remapping::"
#~ msgstr ""
