# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.79 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.79 Manual 2.79\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 18:32-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../manual/compositing/types/color/alpha_over.rst:5
msgid "Alpha Over Node"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:10
msgid "Alpha Over Node."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:12
msgid "The *Alpha Over* node is used to layer images on top of one another."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:14
msgid ""
"Where the foreground image pixels have an alpha greater than 0, the "
"background image will be overlaid."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:18
msgid "Inputs"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:21
msgid "Factor"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:21
msgid ""
"Controls the amount of foreground image. A factor less than 1 will make "
"the foreground more transparent."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:23
#: ../../manual/compositing/types/color/alpha_over.rst:27
#: ../../manual/compositing/types/color/alpha_over.rst:56
msgid "Image"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:24
msgid "Input for the *background* image."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:26
msgid "Input for the *foreground* image."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:30
msgid "Properties"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:39
msgid "Convert Premultiplied"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:33
msgid "Converts foreground image to *premultiplied alpha* format."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:35
msgid ""
"The *Alpha Over* node is designed to work with *premultiplied* alpha "
"color format. Use *Convert Premul* when you know that your image has "
"*straight* alpha color values, to perform the correct over operation. "
"Result will be still premultiplied alpha."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:39
msgid "See :term:`Alpha Channel`."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:49
msgid "Premultiply"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:42
msgid ""
"The *Premul* slider allows to mix between the using *premultiplied* or "
"*non premultiplied* alpha."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:44
msgid ""
"When set to 1, the foreground color values will be multiplied by alpha, "
"i.e. premultiplied. This is equivalent to enabling the *Convert Premul* "
"option. When set to 0, color values does not change."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:48
msgid "If *Premultiply* is not zero, *Convert Premul* will be ignored."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:52
msgid "Outputs"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:55
msgid "Standard image output."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:59
msgid "Examples"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:61
msgid ""
"In the map below, *Color Ramp* node is used to add an alpha channel to "
"the black-and-white swirl image. Then *Alpha Over* node is used to "
"overlay it on top of another image."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:67
msgid "Assembling a composite image using Alpha Over."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:69
msgid ""
"In next example, we use the *Factor* control to make a \"Fade In\" "
"effect. This effect can be animated by adding a *Time* node to feed the "
"*Factor* socket as shown below. In this example, over the course of 30 "
"frames, the *Time* node makes the *Alpha Over* node produce a picture "
"that starts with the pure background image, and title slowly bleeds "
"through the background."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:77
msgid "Animated fade in effect using Alpha Over."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:79
msgid ""
"Note the *Convert Premul* checkbox is enabled, since as the foreground "
"used a PNG image that has *straight* alpha."
msgstr ""

#~ msgid ""
#~ "The *Alpha Over Node* is used to"
#~ " layer images on top of one "
#~ "another. Alpha Over does not work "
#~ "on the colors of an image."
#~ msgstr ""

#~ msgid ""
#~ "This section clarifies the functionality "
#~ "of premultiplied-alpha button. An alpha"
#~ " channel has a value of between "
#~ "0 and 1. To make an image "
#~ "transparent (to composite it over "
#~ "another one), the RGB pixel values "
#~ "are multiplied by the alpha values "
#~ "(making the image transparent (0) where"
#~ " the alpha is black (0), and "
#~ "opaque (1) where it is white (1))."
#~ msgstr ""

#~ msgid ""
#~ "A pre-multiplied alpha is, when "
#~ "the image (RGB) pixels are already "
#~ "multiplied by the alpha channel, "
#~ "therefore, the above compositing operation "
#~ "does not work too well, and "
#~ "*Convert Premultiplied* has to be "
#~ "enabled. This is only an issue in"
#~ " semi-transparent area and edges "
#~ "usually. The issue normally occurs in"
#~ " a node setup, in which two "
#~ "images previously combined with alpha, "
#~ "then are combined again with yet "
#~ "another image. The previously combined "
#~ "image was already multiplied (pre-"
#~ "multiplied) and needs to be converted"
#~ " as such (hence, *Convert PreMul*)."
#~ msgstr ""

#~ msgid "Assembling a composite Image using Alpha Over."
#~ msgstr ""

#~ msgid "Animated See-Through/Sheer SFX using Alpha Over on Frame 11."
#~ msgstr ""

#~ msgid ""
#~ "The *Alpha Over* node is used to"
#~ " layer images on top of one "
#~ "another. Alpha Over does not work "
#~ "on the colors of an image."
#~ msgstr ""

#~ msgid "Controls the amount of influence the node exerts on the output image."
#~ msgstr ""

#~ msgid "The background image."
#~ msgstr ""

#~ msgid ""
#~ "The foreground image. Where the image"
#~ " pixels has an alpha greater than "
#~ "0, the background image will be "
#~ "overlaid."
#~ msgstr ""

#~ msgid "`Strange Halos or Outlines`_."
#~ msgstr ""

#~ msgid "Mix Factor. See :term:`Alpha Channel`."
#~ msgstr ""

#~ msgid "Strange Halos or Outlines"
#~ msgstr ""

#~ msgid ""
#~ "This section clarifies the functionality "
#~ "of the premultiplied alpha button. An"
#~ " alpha channel has a value of "
#~ "between 0 and 1. To make an "
#~ "image transparent (to composite it over"
#~ " another one), the RGB pixel values"
#~ " are multiplied by the alpha values"
#~ " (making the image transparent (0) "
#~ "where the alpha is black (0), and"
#~ " opaque (1) where it is white "
#~ "(1))."
#~ msgstr ""

#~ msgid ""
#~ "To composite image A over image B,"
#~ " the alpha of image A gets "
#~ "multiplied by image A, thus making "
#~ "the image part of A opaque and "
#~ "the rest transparent. Then the alpha "
#~ "channel of A is inverted and "
#~ "multiplied by image B, thus making "
#~ "image B transparent, where A is "
#~ "opaque and vice versa. To get the"
#~ " final composite the resultant images "
#~ "are added."
#~ msgstr ""

#~ msgid ""
#~ "A premultiplied alpha is, when the "
#~ "image (RGB) pixels are already "
#~ "multiplied by the alpha channel, "
#~ "therefore, the above compositing operation "
#~ "does not work too well, and "
#~ "*Convert Premultiplied* has to be "
#~ "enabled. This is only an issue in"
#~ " semitransparent area and edges usually."
#~ " The issue normally occurs in a "
#~ "node setup, in which two images "
#~ "previously combined with alpha, then are"
#~ " combined again with yet another "
#~ "image. The previously combined image was"
#~ " already multiplied (premultiplied) and "
#~ "needs to be converted as such "
#~ "(hence, *Convert PreMul*)."
#~ msgstr ""

#~ msgid ""
#~ "If multiplied twice artifacts like a "
#~ "white or clear halo occur around "
#~ "where the image meet, since the "
#~ "alpha value is being squared or "
#~ "cubed. It also depends on whether "
#~ "or not the image has been rendered"
#~ " as a premultiplied, or as a "
#~ "straight RGBA image."
#~ msgstr ""

#~ msgid ""
#~ "In this example, an image of a "
#~ "Cube is superimposed on a cliff "
#~ "background. Use the PreMultiply button, "
#~ "when the foreground image and background"
#~ " images have a combined Alpha that"
#~ " is greater than 1.00; otherwise, you"
#~ " will see an unwanted halo effect."
#~ " The resulting image is a composite"
#~ " of the two source images."
#~ msgstr ""

#~ msgid "Animated see-through/sheer SFX using Alpha Over on frame 11."
#~ msgstr ""

#~ msgid ""
#~ "In this example, we use the Factor"
#~ " control to make a sheer cloth "
#~ "or onion-skin effect. This effect "
#~ "can be animated, allowing the observer"
#~ " to \"see-through\" walls (or any "
#~ "foreground object) by hooking up a "
#~ "Time node to feed the Factor "
#~ "socket as shown below. In this "
#~ "example, over the course of 30 "
#~ "frames, the Time node makes the "
#~ "Alpha Over node produce a picture "
#~ "that starts with the background cliff"
#~ " image, and slowly bleeds through the"
#~ " cube. This example shows frame 11"
#~ " just as the cube starts to be"
#~ " revealed."
#~ msgstr ""

#~ msgid ""
#~ "Where the foreground image pixels has"
#~ " an alpha greater than 0, the "
#~ "background image will be overlaid."
#~ msgstr ""

#~ msgid ""
#~ "When set to 1, the foreground "
#~ "color values will be multiplied by "
#~ "alpha, i.e. premultiplied. This is "
#~ "equivalent to enabling the *Convert "
#~ "Premul* option. When it set to 0,"
#~ " color values does not change."
#~ msgstr ""

