# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.78 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-27 17:27-0600\n"
"PO-Revision-Date: 2017-03-21 23:08+0900\n"
"Last-Translator: Takashi Sugawara <aimaimokomoko@gmail.com>\n"
"Language: ja\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/render/materials/components/surface.rst:4
#, fuzzy
msgid "Surfaces"
msgstr "サーフェス"

#: ../../manual/render/materials/components/surface.rst:6
#, fuzzy
msgid ""
"The surface shader defines the light interaction at the surface of the "
"mesh. One or more :abbr:`BSDF (Bidirectional scattering distribution "
"function)`\\ s specify if incoming light is reflected back, refracted "
"into the mesh, or absorbed."
msgstr ""
"サーフェスシェーダーはメッシュの表面における光の反応を定義します。1 個以上の :abbr:`BSDF (Bidirectional "
"scattering distribution function)` "
"によって入射した光線が反射されるか、メッシュ内部に屈折して入射するか、吸収されるかが定義されます。"

#: ../../manual/render/materials/components/surface.rst:10
msgid ""
"Emission defines how light is emitted from the surface, allowing any "
"surface to become a light source."
msgstr "Emission はそのサーフェスからどのように光線が発射されるかを定義します、全てのサーフェスは光源になる事ができます。"

#: ../../manual/render/materials/components/surface.rst:15
msgid "Terminology"
msgstr "用語"

#: ../../manual/render/materials/components/surface.rst:18
msgid "BSDF"
msgstr "BSDF"

#: ../../manual/render/materials/components/surface.rst:18
#, fuzzy
msgid ""
"Stands for Bidirectional Scattering Distribution Function. It defines how"
" light is reflected and refracted at a surface."
msgstr ""
"Bidirectional Scattering Distribution Function "
"(双方向性拡散分布関数)の略称です。この関数はある表面でどのように光が反射と屈折するかを表します。"

#: ../../manual/render/materials/components/surface.rst:20
msgid "Reflection"
msgstr "Reflection (反射)"

#: ../../manual/render/materials/components/surface.rst:21
#, fuzzy
msgid "BSDFs reflect an incoming ray on the same side of the surface."
msgstr ""
":abbr:`BSDF (Bidirectional Scattering Distribution Function)` "
"はその表面の同じ面から入射した光線を反射します。"

#: ../../manual/render/materials/components/surface.rst:22
msgid "Transmission"
msgstr "Transmission (透過)"

#: ../../manual/render/materials/components/surface.rst:23
#, fuzzy
msgid ""
"BSDFs transmit an incoming ray through the surface, leaving on the other "
"side."
msgstr ""
":abbr:`BSDF (Bidirectional scattering distribution function)` "
"はその表面を通る光線を、別の面へと透過させます。"

#: ../../manual/render/materials/components/surface.rst:27
msgid "Refraction"
msgstr "Refraction (屈折)"

#: ../../manual/render/materials/components/surface.rst:25
#, fuzzy
msgid ""
"BSDFs are a type of *Transmission*, transmitting an incoming ray and "
"changing its direction as it exits on the other side of the surface."
msgstr ""
":abbr:`BSDF (Bidirectional Scattering Distribution Function)` "
"は、入射した光線の方向を他の表面から出るように変えて通過させる、 *屈折* の一種です。"

#: ../../manual/render/materials/components/surface.rst:30
msgid "BSDF Parameters"
msgstr "BSDF のパラメータ"

#: ../../manual/render/materials/components/surface.rst:32
#, fuzzy
msgid ""
"A major difference from non-physically-based renderers is that direct "
"light reflection from lights and indirect light reflection of other "
"surfaces are not decoupled, but rather handled using a single :abbr:`BSDF"
" (Bidirectional scattering distribution function)`. This limits the "
"possibilities a bit, but we believe overall it is helpful in creating "
"consistent-looking renders with fewer parameters to tune."
msgstr ""
"物理を基礎としないレンダラーとの大きな違いは、光源から直接当たる光の反射と他のサーフェスから間接的に反射された光が区別されず、一つの "
":abbr:`BSDF (Bidirectional Scattering Distribution Function)` "
"に基づいて扱われるという点です。この特徴は表現の可能性を少々制限する物ですが、我々はこの特徴が調整するパラメータを減らして一貫性の有る見た目を作り出すレンダーの助けとなる事を信じて疑いません。"

#: ../../<generated>:1
msgid "Roughness"
msgstr "Roughness (表面粗さ)"

#: ../../manual/render/materials/components/surface.rst:39
#, fuzzy
msgid ""
"For the glossy :abbr:`BSDF (Bidirectional scattering distribution "
"function)`\\ s, the *roughness* parameter controls the sharpness of the "
"reflection, from 0.0 (perfectly sharp) to 1.0 (very soft)."
msgstr ""
"光沢を定義する :abbr:`BSDF (Bidirectional scattering distribution function)` "
"にとって、 *Roughness* のパラメータは反射の鮮明さを調節する物であり、その設定値は 0.0 (完全に鮮明) から 1.0 "
"(とても不明瞭) までです。*hardness* と *exponent* パラメータと比較して、0.0..1.0 "
"という範囲を持っているという利点が有り、より線形的な調整とテクスチャ化しやすいという結果につながっています。関係式はおよそ以下のような物です: "
"*roughness* = 1 - 1/*hardness*"

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chances "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/shader_nodes/converter/math>` and either "
#~ "setting it to *Multiply* and inputing"
#~ " the texture in both input sockets,"
#~ " or using the *Power* function and"
#~ " setting the second input to 2."
#~ msgstr ""
#~ "現在の Blender は非二乗値のモデルを利用するように実装されています。そのため "
#~ ":term:`Roughness Map` "
#~ "を利用しても恐らく正確な結果は得られないでしょう。これを修正するため、テクスチャを :doc:`Math ノード"
#~ " </render/cycles/nodes/types/converter/math>` "
#~ "に接続してその入力両方にテクスチャを渡して *Multiply* に設定、あるいは *Power*"
#~ " に設定して二番目の入力値を 2 にする事で、テクスチャを二乗値化します。"

