#
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-28 00:35+1000\n"
"PO-Revision-Date: 2015-07-14 04:08+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../manual/render/cycles/reducing_noise.rst:4
msgid "Reducing Noise"
msgstr "降噪"

#: ../../manual/render/cycles/reducing_noise.rst:6
msgid ""
"When performing a final render, it is important to reduce noise as much "
"as possible. Here we'll discuss a number of tricks that, while breaking "
"the laws of physics, are particularly important when rendering animations"
" within a reasonable time. Click to enlarge the example images to see the"
" noise differences well."
msgstr "执行最后的渲染时，重要的是尽可能多地减少噪点。当我们打破了物理定律后，在一段合理时间渲染好动画是特别重要的，在这里将讨论一些技巧。点击放大示例图像能很好看出噪点的差异。"

#: ../../manual/render/cycles/reducing_noise.rst:13
msgid "Path Tracing"
msgstr "路径追踪"

#: ../../manual/render/cycles/reducing_noise.rst:15
msgid ""
"Cycles uses path tracing with next event estimation, which is not good at"
" rendering all types of light effects, like caustics, but has the "
"advantage of being able to render more detailed and larger scenes "
"compared to some other rendering algorithms. This is because we do not "
"need to store, for example, a photon map in memory, and because we can "
"keep rays relatively coherent to use an on-demand image cache, compared "
"to e.g. bidirectional path tracing."
msgstr "Cycles使用的是估计下一事件的路径追踪，这种技术并不能很好的把所有类型的光效都渲染出来，比如焦散，但是相对于其他的渲染算法来说可以更好的渲染出细节也适用于大型的场景。主要是因为我们不需要存储，比如，一套光子贴图在内存当中，也因为我们可以保存光线束相对连贯来使用按需的图像缓存，相比较双向路径追踪技术而言。"

#: ../../manual/render/cycles/reducing_noise.rst:26
msgid ""
"We do the inverse of what reality does, tracing light rays from the "
"camera into the scene and onto lights, rather than from the light sources"
" into the scene and then into the camera. This has the advantage that we "
"do not waste light rays that will not end up in the camera, but also "
"means that it is difficult to find some light paths that may contribute a"
" lot. Light rays will be sent either according to the surface BRDF, or in"
" the direction of known light sources (lamps, emitting meshes with Sample"
" as Lamp)."
msgstr ""
"渲染做的事情跟真实世界相反，追踪从相机发出到场景中的的光线束然后再到光源，真实世界是从光源发射出光束到场景然后到相机。这种方法可以让我们避免浪费计算力去计算很多根本到不了相机的光束，但是也会因此丢失很多可能会对成像产生作用的光路。光束可能是从表面的"
" BRDF 射出，或者是直接从已知的光源射出（灯光，发光网格当做灯光来采样）。"

#: ../../manual/render/cycles/reducing_noise.rst:34
msgid ""
"For more details, see the :doc:`Light Paths "
"</render/cycles/settings/light_paths>` and :doc:`Integrator "
"</render/cycles/settings/integrator>` documentation."
msgstr ""
"查看更多技术细节 :doc:`光路 </render/cycles/settings/light_paths>` 和 :doc:`积分器 "
"</render/cycles/settings/integrator>` 文档。"

#: ../../manual/render/cycles/reducing_noise.rst:40
msgid "Where Noise Comes From"
msgstr "噪点的来源"

#: ../../manual/render/cycles/reducing_noise.rst:42
msgid ""
"To understand where noise can come from, take for example this scene. "
"When we trace a light ray into the specified location, this is what the "
"diffuse shader \"sees\". To find the light that is reflected from this "
"surface, we need to find the average color from all these pixels. Note "
"the glossy highlight on the sphere, and the bright spot the lamp casts on"
" the nearby wall. These hotspots are 100x brighter than other parts of "
"the image and will contribute significantly to the lighting of this "
"pixel."
msgstr ""
"要理解噪点的产生问题，让我们以这个场景来理解。当追踪光线束到某个特别的地方，这是散射着色器怎样被 “看见” "
"的。要找到这条光线是怎么被表面反射的，我们需要找到这些像素的所有平均颜色。球上的光泽高光以及灯光聚束投射到附近墙上的亮光。这些亮光部分要比图像的其他部分亮100倍，会在像素点上贡献相当大的光照值。"

#: ../../manual/render/cycles/reducing_noise.rst:62
msgid ""
"The lamp is a known light source, so it will not be too hard to find, but"
" the glossy highlight (s) that it causes are a different matter. The best"
" we can do with path tracing is to distribute light rays randomly over "
"the hemisphere, hoping to find all the important bright spots. If for "
"some pixels we miss some bright spot, but we do find it for another, that"
" results in noise. The more samples we take, the higher the probability "
"that we cover all the important sources of light."
msgstr "灯光作为已知光源，不难被找到，但是光泽高光就是一个困难的课题了。通过路径追踪方式最好的做法就是将光束随机的分布在半球当中，期望能找到所有关键的亮聚光点。如果某些像素点失去了光亮，另外一些像素点又有光亮，噪点产生了。如果采样越多，那么覆盖到所有的重要光源的几率就越大。"

#: ../../manual/render/cycles/reducing_noise.rst:69
msgid ""
"With some tricks we can reduce this noise. If we blur the bright spots, "
"they become bigger and less intense, making them easier to find and less "
"noisy. This will not give the same exact result, but often it's close "
"enough when viewed through a diffuse or soft glossy reflection. Below is "
"an example of using Filter Glossy and Smooth Light Falloff."
msgstr "通过使用一些技巧可以降低噪点。比如将高亮光斑模糊，它们将变大和低强度，这样就相对容易找到也可以减少噪点。虽然不是每次都是一样的结果，不过通过观察漫射或者软光泽反射时能得到差不多的效果。下面是一个用了过滤光泽和柔和灯光衰减的案例。"

#: ../../manual/render/cycles/reducing_noise.rst:88
msgid "Bounces"
msgstr "反弹次数"

#: ../../manual/render/cycles/reducing_noise.rst:90
#, fuzzy
msgid ""
"In reality light will bounce a huge number of times due to the speed of "
"light being very high. In practice more bounces will introduce more "
"noise, and it might be good to use something like the Limited Global "
"Illumination preset that uses *fewer* bounces for different shader types."
" Diffuse surfaces typically can get away with fewer bounces, while glossy"
" surfaces need a few more, and transmission shaders such as glass usually"
" need the most."
msgstr ""
"真实世界中光的速度非常快，在很短的时间内就会反弹无数次。实践中，越多的反弹会引起越多的噪点，最好是能用限制全局光照预设使用 "
"**不同着色器类型最小反弹** 。漫射表面肯定可以较少反弹的，光泽可能会多些，透射着色器如玻璃就需要得更多。"

#: ../../manual/render/cycles/reducing_noise.rst:109
#, fuzzy
msgid ""
"Also important is to use shader colors that do **not** have components of"
" value 1.0 or values near that; try to keep the maximum value to 0.8 or "
"less and make your lights brighter. In reality, surfaces are rarely "
"perfectly reflecting all light, but there are of course exceptions; "
"usually glass will let most light through, which is why we need more "
"bounces there. High values for the color components tend to introduce "
"noise because light intensity then does not decrease much as it bounces "
"off each surface."
msgstr ""
"同样重要得是 **着色器不要将颜色部分的值设到1.0** 或者接近于此；尝试着把最大值设定在 0.8 "
"或者更低再把灯光加亮一些。现实世界中，表面是无法完美的反射所有的光的，当然也有例外；通常玻璃会让大部分光穿过，这也是为什么需要设置玻璃有更多的反弹次数。颜色组件的值太高会导致噪点，因为光线强度在这样的表面反弹多次也不会衰减而造成噪点。"

#: ../../manual/render/cycles/reducing_noise.rst:119
msgid "Caustics and Filter Glossy"
msgstr "焦散和光泽过滤"

#: ../../manual/render/cycles/reducing_noise.rst:121
msgid ""
"Caustics are a well-known source of noise, causing fireflies. They happen"
" because the renderer has difficulty finding specular highlights viewed "
"through a soft glossy or diffuse reflection. There is a :ref:`No Caustics"
" <render-cycles-integrator-no_caustics>` option to disable glossy behind "
"a diffuse reflection entirely. Many render engines will typically disable"
" caustics by default."
msgstr ""
"焦散是噪点的一个重要来源，会引起亮点。因为渲染器是非常难在软光泽或者慢反射浏览后找到镜面高光。有一个 :ref:`无焦散 <render-"
"cycles-integrator-no_caustics>` 节点来完全屏蔽在漫反射后的光泽。很多渲染引擎在默认情况下都是把焦散关闭的。"

#: ../../manual/render/cycles/reducing_noise.rst:140
msgid ""
"However using No Caustics will result in missing light, and it still does"
" not cover the case where a sharp glossy reflection is viewed through a "
"soft glossy reflection. There is a :ref:`Filter Glossy <render-cycles-"
"integrator-filter_glossy>` option to reduce the noise from such cases at "
"the cost of accuracy. This will blur the sharp glossy reflection to make "
"it easier to find, by increasing the shader Roughness."
msgstr ""
"但是无焦散会引起灯光的丢失，而且同样没有解决在软光泽浏览后找到镜面高光。有一个 :ref:`过滤光泽 <render-cycles-"
"integrator-filter_glossy>` "
"的选项来减少这类情况引起的噪点同样是以精确性为代价的。通过调高着色器粗糙度将锐利的光泽反射模糊掉以使它更方便被找到。"

#: ../../manual/render/cycles/reducing_noise.rst:146
msgid ""
"The above images show default settings, no caustics, and filter glossy "
"set to 1.0."
msgstr "上图显示了默认设置，无焦散设置，过滤光泽值设到1.0 。三种情况"

#: ../../manual/render/cycles/reducing_noise.rst:150
msgid "Light Falloff"
msgstr "光线衰减"

#: ../../manual/render/cycles/reducing_noise.rst:152
#, fuzzy
msgid ""
"In reality light in a vacuum will always fall off at a rate of "
"1/(distance^2). However, as distance goes to zero, this value goes to "
"infinity and we can get very bright spots in the image. These are mostly "
"a problem for indirect lighting, where the probability of hitting such a "
"small but extremely bright spot is low and so happens only rarely. This "
"is a typical recipe for fireflies."
msgstr "真正的光在真空中的衰减速率是1/(距离^2)。但当距离接近零的时候，这个值会变成一个无限（1除以零）这样会在图像中会见到一个非常亮的光斑。间接光的时候这是一个大问题，因为撞击到很小但是很亮的区域的概率是非常低的基本上不可能发生。这就是亮点出现的奥义所在。"

#: ../../manual/render/cycles/reducing_noise.rst:168
#, fuzzy
msgid ""
"To reduce this problem, the :doc:`Light Falloff "
"</render/cycles/nodes/types/color/light_falloff>` node has a *Smooth "
"factor*, that can be used to reduce the maximum intensity a light can "
"contribute to nearby surfaces. The images above show default falloff and "
"smooth value 1.0."
msgstr ""
"减少这些问题，:ref:`render-cycles-nodes-more-light_falloff` 节点具有 "
"**平滑因子，可以用来减少最大密度** 影响灯对周围曲面的贡献。上图显示了默认的衰减和平滑到1.0的情况。"

#: ../../manual/render/cycles/reducing_noise.rst:174
msgid "Sample as Lamp"
msgstr "灯光采样"

#: ../../manual/render/cycles/reducing_noise.rst:176
#, fuzzy
msgid ""
"Materials with emission shaders can be configured to be *sampled as lamp*"
" (:ref:`render-cycles-integrator-material_settings`). This means that "
"they will get rays sent directly towards them, rather than ending up "
"there based on rays randomly bouncing around. For very bright mesh light "
"sources, this can reduce noise significantly. However when the emission "
"is not particularly bright, this will take samples away from other "
"brighter light sources for which it is important to find them this way."
msgstr ""
"带有自发光着色器的材质可以配置到 **按灯来采样** (:ref:`render-cycles-integrator-"
"material_settings`) "
"。这就意味着他们可以直接获得指向他们的光束，而不是等光弹射以后再随机的指向它们。如果是非常亮的网格灯光源，这样做可以显著的减少噪点。但是当发光面不是那么强的时候，就需要从其他亮的发光面获得采样这样才能找到这些网格了。"

#: ../../manual/render/cycles/reducing_noise.rst:184
msgid ""
"The optimal setting here is difficult to guess; it may be a matter of "
"trial and error, but often it is clear that a somewhat glowing object may"
" be only contributing light locally, while a mesh light used as a lamp "
"would need this option enabled. Here is an example where the emissive "
"spheres contribute little to the lighting, and the image renders with "
"slightly less noise by disabling Sample as Lamp on them."
msgstr "最佳设置是非常难猜到的；有很多困难和错误，但是有一点是非常清楚的：发光物体可能只会局部的贡献光束，当网格物体作为灯使用的时候需要把这个设置项打开。这里有个示例，发光的球只贡献了很少的光，不把它作为灯光来采样的话可以让图像渲染稍微少一些噪点。"

#: ../../manual/render/cycles/reducing_noise.rst:199
msgid ""
"The world background also has a *Sample as Lamp* (:ref:`render-cycles-"
"integrator-world_settings`) option. This is mostly useful for environment"
" maps that have small bright spots in them, rather than being smooth. "
"This option will then, in a preprocess, determine the bright spots, and "
"send light rays directly towards them. Again, enabling this option may "
"take samples away from more important light sources if it is not needed."
msgstr ""
"世界背景也有作为 *灯光来采样*  (:ref:`render-cycles-integrator-world_settings`) "
"的选项。在环境贴图只有很少量的聚光的时候比整个贴图很柔和是管用。这个选项会做一些预处理，确定亮的部分，然后直接把光束发射给它们。同样，启用该选项会将一些重要的光源采样去除掉不管是不是必须的情况下。"

#: ../../manual/render/cycles/reducing_noise.rst:208
msgid "Glass and Transparent Shadows"
msgstr "透明阴影"

#: ../../manual/render/cycles/reducing_noise.rst:210
#, fuzzy
msgid ""
"With caustics disabled, glass will miss shadows, and with filter glossy "
"they might be too soft. We can make a glass shader that will use a Glass "
"BSDF when viewed *directly*, and a Transparent BSDF when viewed "
"*indirectly*. The Transparent BSDF can be used for transparent shadows to"
" find light sources straight through surfaces, and will give properly-"
"colored shadows, but without the caustics. The Light Path node is used to"
" determine when to use which of the two shaders."
msgstr ""
"关闭焦散后，玻璃会丢掉阴影，加上过滤光泽会让它们看着非常的软。我们可以把一个玻璃着色器做得 "
"**直接观察时使用玻璃BSDF，间接观察时使用透射BSDF** "
"。透射BSDF可以用来做光源直接穿透表面时的透明阴影，给出正确的带颜色的阴影，但是没有焦散。光程节点能够决定什么情况下选用用这两个着色器之一。"

#: ../../manual/render/cycles/reducing_noise.rst:220
msgid "Optimized glass shader."
msgstr ""

#: ../../manual/render/cycles/reducing_noise.rst:223
msgid ""
"Above we can see the node setup used for the glass transparency trick; on"
" the left the render has too much shadow due to missing caustics, and on "
"the right the render with the trick."
msgstr "上图是玻璃透明的节点设置技巧；渲染图的左边因为丢失焦散有太多的阴影，右边是使用了技巧的渲染。"

#: ../../manual/render/cycles/reducing_noise.rst:237
msgid "Window Lights"
msgstr "窗口光线"

#: ../../manual/render/cycles/reducing_noise.rst:239
msgid ""
"When rendering a daylight indoor scene where most of the light is coming "
"in through a window or door opening, it is difficult for the integrator "
"to find its way to them. We can replace the opening with a plane with an "
"emission shader, so that the integrator knows in which direction to fire "
"rays. For camera rays we can make this mesh light invisible, so that we "
"can still look into the outside scene. This is done either by disabling "
"camera ray visibility on the object, or by switching between glass and "
"emission shaders in the material."
msgstr "当渲染一个大部分光源都来至于窗口或者是敞开门的白天的室内场景的时候，积分器相当难找到这些光束的通路。我们可以将敞开的地方用一块带发光着色器的网格来覆盖，这样积分器知道哪些方向发射光束。单独的相机光束我们可以设置为网格光不可见，这样我们依然可以通过这个敞口看到室外的场景。可以通过关掉物体的相机光束可见性，或者在材质中切换发光和玻璃着色器来实现。"

#: ../../manual/render/cycles/reducing_noise.rst:248
msgid ""
"The two renders below have the same render time, with the second render "
"using a mesh light positioned in the window."
msgstr "两张渲染有相同的渲染时间，第二张在窗户处加了网格灯。"

#: ../../manual/render/cycles/reducing_noise.rst:260
msgid ""
"In newer versions, :doc:`light portals </render/cycles/world>` provide a "
"better solution."
msgstr "新版本中, :doc:`导光面 </render/cycles/world>` 提供了更好的解决方法。"

#: ../../manual/render/cycles/reducing_noise.rst:265
msgid "Clamp Fireflies"
msgstr "限定亮点"

#: ../../manual/render/cycles/reducing_noise.rst:267
msgid ""
"Ideally with all the previous tricks, fireflies would be eliminated, but "
"they could still happen. For that, the *intensity* that any individual "
"light ray sample will contribute to a pixel can be *clamped* to a maximum"
" value with the integrator :ref:`Clamp setting <render-cycles-integrator-"
"clamp_samples>`."
msgstr ""

#: ../../manual/render/cycles/reducing_noise.rst:271
msgid ""
"If set too low this can cause missing highlights in the image, which "
"might be useful to preserve for camera effects such as bloom or glare. To"
" mitigate this conundrum it's often useful to clamp only indirect "
"bounces, leaving highlights directly visible to the camera untouched."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "Ideally with all the previous tricks,"
#~ " fireflies would be eliminated, but "
#~ "they could still happen. For that, "
#~ "**the intensity that any individual "
#~ "light ray sample will contribute to "
#~ "a pixel can be clamped** to a "
#~ "maximum value with the integrator "
#~ ":ref:`Clamp setting <render-cycles-"
#~ "integrator-clamp_samples>`."
#~ msgstr ""

