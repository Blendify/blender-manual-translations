# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.78 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-20 03:54+0800\n"
"PO-Revision-Date: 2018-06-20 11:48+0800\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"X-Generator: Poedit 2.0.8\n"

#: ../../manual/pipeline/bam.rst:4
msgid "BAM Asset Manager"
msgstr "BAM资产管理器"

#: ../../manual/pipeline/bam.rst:6
msgid ""
"Refactoring linked blend-files is a common practice in a production "
"environment. While some basic operations can be accomplished within Blender, "
"sometimes it is more practical to perform them on the command line or via a "
"script. During the production of Cosmos Laundromat (Gooseberry Open Movie "
"Project) the *BAM Asset Manager* (BAM) was developed. The original scope of "
"BAM included client-server asset management tools going beyond Blender, but it "
"was later refocused on core utilities to perform two operations:"
msgstr ""

#: ../../manual/pipeline/bam.rst:14
msgid "Blend-file packing"
msgstr "Blender文档打包"

#: ../../manual/pipeline/bam.rst:15
msgid "Automatic dependencies remapping"
msgstr "依赖关系的自动映射"

#: ../../manual/pipeline/bam.rst:17
msgid "The following section of the manual focuses on how to use BAM."
msgstr "下面重点介绍如何使用BAM。"

#: ../../manual/pipeline/bam.rst:23
msgid "Installing BAM"
msgstr "安装BAM"

#: ../../manual/pipeline/bam.rst:25
msgid ""
"BAM is a standalone Python package, that can be run on any system without any "
"particular configuration. The only requirement is Python 3 (and pip, the "
"Python package manager, to easily install BAM)."
msgstr ""
"BAM是一个独立的Python安装包，不需要特殊的设置即可在任何系统中运行，唯一的要求是"
"Python 3（以及pip，即Python安装包管理器，以便更容易的安装BAM）。"

#: ../../manual/pipeline/bam.rst:28
msgid ""
"Windows, Linux and macOS provide different ways to install Python 3 and pip. "
"Check out the online docs to learn more about a specific platform."
msgstr ""
"在Windows，Linux及macOS中安装Python 3和pip的方法各不相同，可查看在线文档来了解"
"针对具体平台的相关事项。"

#: ../../manual/pipeline/bam.rst:31
msgid ""
"Once Python 3 and pip3 are available, BAM can be installed via command line by "
"typing:"
msgstr "安装好Python 3和pip以后，可通过命令行来安装BAM，指令如下："

#: ../../manual/pipeline/bam.rst:37
msgid ""
"After a successful installation, the ``bam`` command will be available. By "
"typing it and pressing :kbd:`Enter`, all the available subcommands will be "
"displayed."
msgstr ""
"安装成功后，就可以使用 `bam` 指令了。输入此指令并回车后，会列出所有可用的子命"
"令。"

#: ../../manual/pipeline/bam.rst:42
msgid "bam pack"
msgstr "bam pack"

#: ../../manual/pipeline/bam.rst:44
msgid ""
"This command is used for packing a ``.blend`` file and *all* its dependencies "
"into a ``.zip`` file for redistribution. ::"
msgstr ""
"此命令用来把 ``.blend`` 文档和所有相关的依赖文件打包为一个 ``.zip`` 文档以便于"
"重新分发。::"

#: ../../manual/pipeline/bam.rst:50
msgid ""
"You can simply pack a blend-file like this to create a zip-file of the same "
"name."
msgstr "可以像这样把blend文档打包，并创建一个同名zip压缩文件。"

#: ../../manual/pipeline/bam.rst:56
msgid ""
"You may also want to give an explicit output directory. The example shows how "
"to pack a blend with maximum compression for online downloads."
msgstr ""
"也可以指定一个明确的输出目录。这个例子显示了如何把blend文件最大程度的压缩以供在"
"线下载。"

#: ../../manual/pipeline/bam.rst:63
msgid ""
"The command provides several options to adapt to different workflows (final "
"distribution, partial extraction, rendering)."
msgstr ""
"此指令提供了几种适用于不同工作流程的选项（如最终分发，部分提取，渲染等等）。"

#: ../../manual/pipeline/bam.rst:66
msgid "``-o``, ``--output`` ``<FILE>``"
msgstr "``-o``, ``--output`` ``<FILE>``"

#: ../../manual/pipeline/bam.rst:67
msgid "Output file or a directory when multiple inputs are passed."
msgstr "输出文档，或在多重输入时输出目录。"

#: ../../manual/pipeline/bam.rst:68
msgid "``-m``, ``--mode`` ``<MODE>``"
msgstr "``-m``, ``--mode`` ``<MODE>``"

#: ../../manual/pipeline/bam.rst:69
msgid ""
"Output file or a directory when multiple inputs are passed. Possible choices: "
"``ZIP``, ``FILE``."
msgstr "输出文档，或在多重输入时输出目录。可选项为： ``ZIP``, ``FILE``。"

#: ../../manual/pipeline/bam.rst:75
msgid "``-e``, ``--exclude`` ``<PATTERN(S)>``"
msgstr "``-e``, ``--exclude`` ``<PATTERN(S)>``"

#: ../../manual/pipeline/bam.rst:71
msgid "Optionally exclude files from the pack."
msgstr "打包时有选择性的排除一些文件。"

#: ../../manual/pipeline/bam.rst:73
msgid "``--exclude=\"*.png\"``"
msgstr "``--exclude=\"*.png\"``"

#: ../../manual/pipeline/bam.rst:74
msgid "Using Unix shell-style wild-cards *(case insensitive)*."
msgstr "采用Unix shell方式的通配符（不区分大小写）。"

#: ../../manual/pipeline/bam.rst:75
msgid "``--exclude=\"*.txt;*.avi;*.wav\"``"
msgstr "``--exclude=\"*.txt;*.avi;*.wav\"``"

#: ../../manual/pipeline/bam.rst:76
msgid "Multiple patterns can be passed using the ``;`` separator."
msgstr "可以使用多重类型，以“;”为分隔符。"

#: ../../manual/pipeline/bam.rst:77
msgid "``-a``, ``--all-deps``"
msgstr "``-a``, ``--all-deps``"

#: ../../manual/pipeline/bam.rst:78
msgid "Follow all dependencies (unused indirect dependencies too)."
msgstr "采用所有的依赖关系（未使用的非直接的依赖关系也包括在内）。"

#: ../../manual/pipeline/bam.rst:79
msgid "``-q``, ``--quiet``"
msgstr "``-q``, ``--quiet``"

#: ../../manual/pipeline/bam.rst:80
msgid "Suppress status output."
msgstr "不作状态输出。"

#: ../../manual/pipeline/bam.rst:82
msgid "``-c``, ``--compress`` ``<LEVEL>``"
msgstr "``-c``, ``--compress`` ``<LEVEL>``"

#: ../../manual/pipeline/bam.rst:82
msgid ""
"Compression level for resulting archive. Possible choices: ``default``, "
"``fast``, ``best``, ``store``."
msgstr ""
"结果文档的压缩等级。可选项为：``default``, ``fast``, ``best``, ``store``。"

#: ../../manual/pipeline/bam.rst:85
msgid "``--repo`` ``<DIR PATH>``"
msgstr "``--repo`` ``<DIR PATH>``"

#: ../../manual/pipeline/bam.rst:85
msgid ""
"Specify a \"root\" path from where to pack the selected file. This allows for "
"the creation of a sparse copy of the production tree, without any remapping."
msgstr ""
"为压缩所选文件指定根路径。这样可以不进行重映射即创建一个作品树结构的稀疏拷贝。"

#: ../../manual/pipeline/bam.rst:89
msgid "``--warn-external``"
msgstr "``--warn-external``"

#: ../../manual/pipeline/bam.rst:88
msgid "Report external libraries errors (missing paths)."
msgstr "报告外部库的错误（丢失路径）。"

#: ../../manual/pipeline/bam.rst:92
msgid "Examples"
msgstr "示例"

#: ../../manual/pipeline/bam.rst:94
msgid ""
"Consider the following directory layout, and in particular the file *01_01_A."
"lighting.blend* with its linked libraries."
msgstr "考虑下列目录布局，其中 *01_01_A.lighting.blend* 文档带有关联库。"

#: ../../manual/pipeline/bam.rst:110
msgid ""
"Once we run ``bam pack /scenes/01-opening/01_01_A.lighting.blend`` we obtain a "
"*01_01_A.lighting.zip* inside of which we find the following structure."
msgstr ""
"运行 ``bam pack /scenes/01-opening/01_01_A.lighting.blend`` 命令后，会得到 "
"*01_01_A.lighting.zip* 文档，此文档内部结构如下所示。"

#: ../../manual/pipeline/bam.rst:125
msgid ""
"Note how all paths have been remapped relative to the placement of *01_01_A."
"lighting.blend* in the root of the output. If we run ``bam pack /scenes/01-"
"opening/01_01_A.lighting.blend --repo ~/agent327``, the output will be "
"different."
msgstr ""
"请注意此输出结果中所有路径是如何以 *01_01_A.lighting.blend* 为根重映射的。如果"
"运行 ``bam pack /scenes/01-opening/01_01_A.lighting.blend --repo ~/agent327`` "
"命令，输出结果就会不同了。"

#: ../../manual/pipeline/bam.rst:142
msgid ""
"In this case no path is remapped, and we simply strip out any file that is not "
"referenced as a direct or indirect dependency of *01_01_A.lighting.blend*. "
"This is effectively a sparse copy of the original production tree."
msgstr ""
"此处未进行重映射，仅仅简单地提取出所有文档而没有给出相对于 *01_01_A.lighting."
"blend* 的直接或间接的依赖关系。这实际上是原始作品树结构的稀疏拷贝。"

#: ../../manual/pipeline/bam.rst:148
msgid "bam remap"
msgstr "bam remap"

#: ../../manual/pipeline/bam.rst:150
msgid "Remap blend-file paths::"
msgstr "重映射blend文档的路径："

#: ../../manual/pipeline/bam.rst:154
msgid "This command is a three step process:"
msgstr "此命令有三个步骤："

#: ../../manual/pipeline/bam.rst:156
msgid ""
"First run ``bam remap start .`` which stores the current state of your project "
"(recursively)."
msgstr "首先运行 ``bam remap start .`` 来（递归地）储存项目的当前状态。"

#: ../../manual/pipeline/bam.rst:157
msgid "Then re-arrange the files on the file system (rename, relocate)."
msgstr "然后在文件系统中重新安置文档（重命名，更改放置位置）。"

#: ../../manual/pipeline/bam.rst:158
msgid ""
"Finally run ``bam remap finish`` to apply the changes, updating the ``.blend`` "
"files internal paths."
msgstr ""
"最后运行 ``bam remap finish`` 来应用修改，并更新 ``.blend`` 文档内部路径。"

#: ../../manual/pipeline/bam.rst:171
msgid ""
"Remapping creates a file called ``bam_remap.data`` in the current directory. "
"You can relocate the entire project to a new location but on executing "
"``finish``, this file must be accessible from the current directory."
msgstr ""
"在当前目录下重映射创建一个名为 ``bam_remap.data`` 的文档。可以把整个项目重新放"
"置到新的地方，但在执行 ``finish`` 的时候此文档必须是在当前目录内。"

#: ../../manual/pipeline/bam.rst:177
msgid ""
"This command depends on files unique contents, take care not to modify the "
"files once remap is started."
msgstr "此命令依赖文档的独占内容，故一旦开始重映射后要注意不要修改文档。"

#: ../../manual/pipeline/bam.rst:182
msgid "Subcommands"
msgstr "子命令"

#: ../../manual/pipeline/bam.rst:185
msgid "remap start"
msgstr "remap start"

#: ../../manual/pipeline/bam.rst:187
msgid "Start remapping the blend-files::"
msgstr "开始重映射blend文档："

#: ../../manual/pipeline/bam.rst:193 ../../manual/pipeline/bam.rst:208
#: ../../manual/pipeline/bam.rst:219
msgid "``-j``, ``--json``"
msgstr "``-j``, ``--json``"

#: ../../manual/pipeline/bam.rst:192 ../../manual/pipeline/bam.rst:207
#: ../../manual/pipeline/bam.rst:218
msgid "Generate JSON output."
msgstr "生成JSON输出。"

#: ../../manual/pipeline/bam.rst:196
msgid "remap finish"
msgstr "remap finish"

#: ../../manual/pipeline/bam.rst:198
msgid "Finish remapping the blend-files::"
msgstr "结束重映射blend文档："

#: ../../manual/pipeline/bam.rst:202
msgid "``-r``, ``--force-relative``"
msgstr "``-r``, ``--force-relative``"

#: ../../manual/pipeline/bam.rst:203
msgid "Make all remapped paths relative (even if they were originally absolute)."
msgstr "所有重映射路径采用相对路径（即使源文档采用绝对路径也改为采用相对路径）。"

#: ../../manual/pipeline/bam.rst:204
msgid "``-d``, ``--dry-run``"
msgstr "``-d``, ``--dry-run``"

#: ../../manual/pipeline/bam.rst:205
msgid "Just print output as if the paths are being run."
msgstr "如同路径正在运行一样打印输出结果。"

#: ../../manual/pipeline/bam.rst:211
msgid "remap reset"
msgstr "remap reset"

#: ../../manual/pipeline/bam.rst:213
msgid "Cancel path remapping::"
msgstr "取消路径重映射："

#~ msgid ""
#~ "Refactoring linked .blend files is a common practice in a production "
#~ "environment. While some basic operations can be accomplished within "
#~ "Blender, sometimes it is more practical to perform them on the command line "
#~ "or via a script. During the production of Cosmos Laundromat (Gooseberry "
#~ "Open Movie Project) the *BAM Asset Manager* (BAM) was developed. The "
#~ "original scope of BAM included client-server asset management tools going "
#~ "beyond Blender, but it was later refocused on core utilities to perform two "
#~ "operations:"
#~ msgstr ""
#~ "重构.blend文档是时常要进行的。虽然一些基本的操作可以在Blender中完成，但通过"
#~ "命令行或者脚本来操作有时候更为实际。在制作 Cosmos Laundromat （宇宙洗衣房）"
#~ "（Gooseberry开源电影项目）的过程中开发了 *BAM资产管理器*。起初BAM的功能包括"
#~ "超出Blender的“客户端——服务器”资产管理，但最后还是重新聚焦于以下两个核心的操"
#~ "作："
