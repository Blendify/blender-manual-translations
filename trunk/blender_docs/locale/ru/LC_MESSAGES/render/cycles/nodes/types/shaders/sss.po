# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender 2.77 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.77 Manual 2.77\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-30 09:40+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:5
msgid "Subsurface Scattering"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:7
msgid ""
"Simple subsurface multiple scattering, for materials such as skin, wax, "
"marble, milk and others. For these materials, rather than light being "
"reflect directly off the surface, it will penetrate the surface and "
"bounce around internally before getting absorbed or leaving the surface "
"at a nearby point."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:12
msgid ""
"How far the color scatters on average can be configured per RGB color "
"channel. For example, for skin, red colors scatter further, which gives "
"distinctive red-colored shadows, and a soft appearance."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:30
msgid "Falloff"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:17
msgid "Lighting distance falloff function."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:19
msgid "Cubic"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:20
msgid ""
"Is a sharp falloff useful for many simple materials. The function is "
"(*radius* - *x*)\\ :sup:`3`"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:26
msgid "Gaussian"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:22
msgid ""
"Gives a smoother falloff following a normal distribution, which is "
"particularly useful for more advanced materials that use measured data "
"that was fitted to one or more such Gaussian functions. The function is "
"e\\ :sup:`-8x^2/ radius^2`\\, such that the radius roughly matches the "
"maximum falloff distance. To match a given measured variance *v*, set "
"*radius* = sqrt(16 Ã— *v*)."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:30
msgid "Christensen-Burley"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:29
msgid ""
"Is an approximation to physically based volume scattering. Gives less "
"blurry results than Cubic and Gaussian functions."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:32
msgid "Color input"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:33
msgid ""
"Color of the surface, or physically speaking, the probability that light "
"is reflected for each wavelength."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:34
msgid "Scale input"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:35
msgid "Global scale factor for the scattering radius."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:36
msgid "Radius input"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:37
msgid ""
"Scattering radius for each RGB color channel, the maximum distance that "
"light can scatter."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:39
msgid "Sharpness input"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:39
msgid ""
"Used only with *Cubic* falloff. Values increasing from 0 to 1 prevents "
"softening of sharp edges and reduces unwanted darkening."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:41
msgid "Normal input"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:42
msgid ""
"Normal used for shading; if nothing is connected the default shading "
"normal is used."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:51
msgid "Texture Blur input"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:44
msgid ""
"How much of the texture will be blurred along with the lighting, mixing "
"the texture at the incoming and outgoing points on the surface. Note that"
" the right choice depends on the texture. Consider for example a texture "
"created from a photograph of skin, in this cases the colors will already "
"be pre-blurred and texture blur could be set to 0. Even for hand painted "
"textures no or minimal blurring might be appropriate, as a texture artist"
" would likely paint in softening already, one would usually not even know"
" what an unblurred skin texture looks like, we always see it blurred. For"
" a procedural texture on the other hand this option would likely have a "
"higher value."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:55
msgid "BSSRDF output"
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:54
msgid ""
":abbr:`BSSRDF (Bidirectional subsurface scattering distribution "
"function)` shader."
msgstr ""

#: ../../manual/render/cycles/nodes/types/shaders/sss.rst:59
msgid "A skin-toned SSS shader with color radius: 1.0, 0.8, 0.5."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "Is a sharp falloff useful for many"
#~ " simple materials. The function is "
#~ "(*radius* - *x*)\\ :sup:`3` \\"
#~ msgstr ""

#~ msgid ""
#~ "Gives a smoother falloff following a "
#~ "normal distribution, which is particularly "
#~ "useful for more advanced materials that"
#~ " use measured data that was fitted"
#~ " to one or more such Gaussian "
#~ "functions. The function is e "
#~ ":sup:`-8x^2/ radius^2`, such that the "
#~ "radius roughly matches the maximum "
#~ "falloff distance. To match a given "
#~ "measured variance *v*, set *radius* ="
#~ " sqrt(16 \\* \\ *v*)."
#~ msgstr ""

