# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.78 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-18 15:55-0400\n"
"PO-Revision-Date: 1971-01-02 00:00+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/animation/drivers/workflow_examples.rst:4
msgid "Workflow & Examples"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:6
msgid ""
"Simple Drivers can be configured from the pop-over that appears when "
"adding a new Driver."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:8
msgid ""
"When adding multiple Drivers or for more advanced configurations, it is "
"useful to have open the :doc:`Drivers Editor </editors/drivers_editor>`."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:13
msgid "Transform Driver"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:15
msgid ""
"Control a property with an object's transform. In this example, the Y "
"rotation of Object 2 will be driven by the X position of Object 1."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:18
msgid "Starting from a simple setup with two objects:"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:20
msgid ""
"Add a Driver to the *Rotation Y* property of the second object via the "
"context menu or with :kbd:`Ctrl-D`."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:24
msgid ""
"Open the *Drivers Editor* and select the *Y Euler Rotation* property in "
"the channels region."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:25
msgid "Open the Sidebar region and select the *Drivers* tab."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:26
msgid ""
"Configure the driver to be the *Averaged Value* of a *Transform Channel* "
"of the first object."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:30
msgid ""
"Experiment with moving the first object and notice how it affects the Y "
"rotation of the second object."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:34
msgid "Scripted Expression - Orbit a Point"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:36
msgid ""
"Orbit an object's position around a point with a custom *Scripted "
"Expression*. The object's position will change when scrubbing the "
"timeline."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:39
msgid ""
"Using trigonometry, circular motion can be defined in 2D using the sinus "
"and cosine functions. (See `Unit Circle "
"<https://en.wikipedia.org/wiki/Unit_circle>`__.)"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:42
msgid ""
"In this example, the current frame is used as the variable that induces "
"the motion. ``frame`` is a :ref:`Simple Expression <drivers-simple-"
"expressions>` that corresponds to ``bpy.context.scene.frame_current``."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:48
msgid "Add a driver to the X Location property."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:50
msgid "Set the *Driver Type* to *Scripted Expression*."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:51
msgid "Add the expression ``0 + (sin(frame / 8) * 4)``, where:"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:53
msgid ""
"``frame/8`` : is the current frame of the animation, divided by 8 to slow"
" the orbit down."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:54
msgid ""
"``(sin( )*4)`` : multiplies the result of ``sin(frame/8)`` by 4 for a "
"bigger circle."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:55
msgid "``0 +`` : is used to control the offset to the orbit center point."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:57
msgid ""
"Add a driver to the Y Location property with the expression ``0 + "
"(cos(frame / 8) * 4)``."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:58
msgid ""
"Scrub the timeline to see the effect. Experiment with the variables to "
"control the size and center of the orbit."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:63
msgid "Custom Function - Square Value"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:65
msgid ""
"Create a custom function to get the square of a value (i.e. *value*\\ "
":sup:`2`). Adding the function to the *Driver Namespace* allows it to be "
"used from driver expressions."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:68
msgid ""
"The *Driver Namespace* has a list of built-in functions for use in driver"
" expressions, as well as constants such as pi and e. These can be "
"inspected via the Python Console::"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:80
msgid ""
"To add a new function to the *Driver Namespace*, the function itself "
"needs to be implemented and then added to the "
"``bpy.app.driver_namespace``."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:83
msgid ""
"Add the following to the Text Editor inside Blender and press *Run "
"Script*. ::"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:94
msgid "Add a driver with a *Scripted Expression* such as ``square(frame)``."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:95
msgid "Observe the effect when scrubbing the timeline."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:97
msgid ""
"There are more custom function examples available in Blender's Text "
"Editor :menuselection:`Templates --> Python --> Driver Functions`."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:103
msgid "Shape Key Drivers"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:106
msgid "Improved Mesh Deformation"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:108
msgid ""
"Fix intersection problems that happen when using armatures and weight "
"painting, specially at joints. Shape keys can also be used to tweak and "
"refine a rig, for example to suggest muscle formations. In this example, "
"a shape key is used to improve the deformation at the elbow of a "
"rudimentary arm."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:114
msgid ""
"Left: Skeletal mesh deformation without correction. Right: Corrective "
"shape key applied"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:119
msgid "Setup"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:121
msgid "Add a mesh (in this example, a cylinder with loop cuts)."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:122
msgid "Add an armature with a chain of bones."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:123
msgid "Skin the mesh to the armature using weight painting."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:125
msgid ""
"(Note: to parent the mesh to the armature: select the mesh first, then "
"the armature and use :kbd:`Ctrl-P` to parent with auto weights.)"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:128
msgid ""
"Experiment with posing the armature and observe the deformation at the "
"joint. To fix intersection problems or angles that look unsatisfactory, "
"you can associate a :doc:`Shape Key </animation/shape_keys/index>` with a"
" pose."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:134
msgid "Shape Key"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:136
msgid ""
"Pose the armature such that the problems are visible. Be sure to cover "
"the extreme poses that you want to support for the rig."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:138
msgid ""
"With the mesh selected, add a new *Shape Key* in addition to the *Basis* "
"key. :menuselection:`Properties --> Mesh tab --> Shape Keys`"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:140
msgid ""
"In order to author the shape key on top of the armature deformation, "
"enable both *Edit Mode Display* and *Cage Editing* in the armature "
"modifier. :menuselection:`Properties --> Modifiers tab --> Armature "
"Modifier --> Header`"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:143
msgid ""
"Enter Edit Mode and select the new shape key in the properties panel. "
"Adjust the vertices as desired. Select the *Basis* key to toggle between "
"the original mesh and your edits. (Note: be careful to apply edits only "
"to your shape and not to the original mesh or other existing keys.)"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:150
msgid ""
"Once you are satisfied with how the deformation looks for the problematic"
" pose, you'll need to configure a driver to activate the shape smoothly "
"when entering that position."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:155
msgid "Driver"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:157
msgid "Add a driver to the *Value* of the shape key you've created."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:158
msgid "Open the Drivers Editor and select the driver."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:162
msgid "Method 1 -- Direct mapping to a bone rotation value"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:163
msgid ""
"A simple way to configure the driver is with a direct correspondence of "
"the value of a bone's rotation channel to the shape key activation "
"*Value*. This method has the disadvantage of relying on a single channel "
"of a bone's rotation which might be insufficient to precisely express the"
" condition under which the shape key should be activated."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:169
msgid ""
"In the Drivers tab, select the *Averaged Value* of the rotation of the "
"bone you're posing."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:171
msgid ""
"Understand the rotation axis that you're interested in by enabling axes "
"display in the armature or by observing the bone's transform values in "
"the Properties."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:174
msgid ""
"Select the rotation channel and set it to local, meaning, the bone's "
"rotation value relative to its parent bone."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:179
msgid ""
"Manually set points in the driver curve by selecting a handle and "
"dragging it or inserting values in the *F-Curve* tab. The Y Axis "
"represents the shape key *Value*, which should go from 0.0 to 1.0. The X "
"Axis is usually the frame, but for this driver it represents the rotation"
" value in radians. You can have more than two points in the curve and "
"tweak the transitions with the handles in the curve view (:kbd:`G` to "
"move)."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:186
msgid ""
"To verify that the driver behaves correctly, deselect the option to only "
"show drivers for selected objects. This way, you can pose the armature "
"and keep an eye on the driver."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:192
msgid "Method 2 -- Rotational difference to a target bone"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:193
msgid ""
"This method requires an additional *target* or *corrective* bone, but it "
"better expresses the spatial condition in 3D space of the bone that is "
"causing the problem."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:196
msgid ""
"In armature Edit Mode, add a new bone extruded from Bone 1, in the "
"position at which Bone 2 should have the shape key active. This type of "
"bones usually follow a naming convention such as \"TAR-\" (target) or "
"\"COR-\" (corrective)."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:201
msgid ""
"In the Drivers tab, select the *Averaged Value* of the rotational "
"difference between the bone you're rotating and the target bone. A "
"rotational difference is the minimum angle between two objects in world "
"space. It is therefore important that the bones have the same root, so "
"that the only thing affecting the angle between the bones is the rotation"
" of one of them. When the deformation bone (Bone 2) reaches the target "
"rotation (TAR-Bone 2) the rotational difference will be 0°."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:211
msgid ""
"Manually adjust the driver curve handles so that the shape key *Value* (Y"
" axis) is 1.0 when the rotational difference (X axis) is 0°. The *Value* "
"should be 0.0 when the arm is extended, at which point the rotational "
"difference should be around 90° or more (in radians)."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:216
msgid ""
"See the steps in Method 1 on how to adjust the curve handles and confirm "
"that the functionality is working. Pose the armature to verify that the "
"ranges are correct."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:222
msgid "Chained Relative Shape Keys"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:224
msgid ""
"Setup a chain of multiple relative shape keys that partially overlap "
"given a certain input."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:226
msgid ""
"In this example, different shapes overlap in effect and in the input that"
" drives them. It is important to remember that :ref:`relative shape keys "
"mix additively <animation-shapekeys-relative-vs-absolute>`."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:230
msgid ""
"While relative shape keys lack the convenience of the single *Evaluation "
"Time* of absolute shape keys, they allow for more complex relationships "
"between your shape keys. The following images illustrate combining shape "
"keys, bones, and drivers to make multiple chained relative shape keys "
"sharing a single root."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:237
msgid "Shape Keys"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:244
msgid "Basis shape key."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:249
msgid "Key1 shape key."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:254
msgid "Key2A shape key."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:259
msgid "Key2B shape key."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:261
msgid "The images above show a single mesh with shape keys."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:263
msgid ""
"*Key1* has the base fully extended as well as the top of both stacks. "
"*Key2A* and *Key2B* are both relative to *Key1* and extend one stack "
"without affecting the base."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:268
msgid "Drivers"
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:275
msgid "Key1 must handle conflicting values from the two bones."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:280
msgid ""
"Key2A has different generator coefficients so it is activated in a "
"different range of the bone's position."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:285
msgid "Key2B is the same as Key2A, but is controlled by the second bone."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:287
msgid ""
"The *Value* of *Key1* is bound to the position of two different bones by "
"a driver with two variables. Each variable uses the world Z coordinate of"
" a bone and uses the maximum value to determine how much the base should "
"be extended. The generator polynomial is crafted such that the top of the"
" dominant stack should line up with the bone for that stack."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:293
msgid ""
"The *Value* of *Key2A* is bound to the position of \"Bone.L\". Its "
"generator parameters are crafted such that when *Key1*'s *Value* reaches "
"1, the *Value* of *Key2A* starts increasing beyond zero. In this way, the"
" top of the left stack will move with bone.L (mostly)."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:298
msgid ""
"The *Value* of *Key2B* is bound to the position of \"Bone.R\". Its "
"generator parameters are similar to *Key2A* so that the top of the right "
"stack will move with bone.R (mostly)."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:309
msgid ""
"When both bones are low, Key2B and Key2A are deactivated and Key1 is at "
"low influence."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:314
msgid "Extended."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:316
msgid ""
"Since it is quite easy for bone.L and bone.R to be in positions that "
"indicate conflicting values for *Key1* there will be times when the bones"
" do not line up with the tops of their respective stacks. If the driver "
"for *Key1* was to use Average or Minimum instead of Maximum to determine "
"the value of the shape key then \"conflicts\" between bone.L and bone.R "
"would be resolved differently. You will choose according to the needs of "
"your animation."
msgstr ""

#: ../../manual/animation/drivers/workflow_examples.rst:324
msgid ""
"The following video shows a timelapse of this example and the end result "
"at 3:58."
msgstr ""

#~ msgid "Some examples."
#~ msgstr ""

#~ msgid "Modify the driver variable settings."
#~ msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "UI"
#~ msgstr ""

#~ msgid "Add Drivers"
#~ msgstr ""

#~ msgid "Add Single Driver"
#~ msgstr ""

#~ msgid "This will add a single driver to the selected property."
#~ msgstr ""

#~ msgid "Expression"
#~ msgstr ""

#~ msgid "Some examples:"
#~ msgstr ""

#~ msgid "``#frame``"
#~ msgstr ""

#~ msgid "``#frame / 20.0``"
#~ msgstr ""

#~ msgid "``#sin(frame)``"
#~ msgstr ""

#~ msgid "``#cos(frame)``"
#~ msgstr ""

#~ msgid "Copy Paste"
#~ msgstr ""

#~ msgid ""
#~ "There is a list of built-in "
#~ "driver functions and properties. These "
#~ "can be displayed via the Python "
#~ "Console::"
#~ msgstr ""

#~ msgid ""
#~ "This script will add a function to"
#~ " the driver namespace, which can then"
#~ " be used in the expression "
#~ "``driver_func(frame)``::"
#~ msgstr ""

#~ msgid "Shape Key Driver. Click to enlarge."
#~ msgstr ""

#~ msgid "Drivers And Multiple Relative Shape Keys"
#~ msgstr ""

#~ msgid ""
#~ "There is a list of built-in "
#~ "driver functions and properties. These "
#~ "can be displayed via the Python "
#~ "Console"
#~ msgstr ""

#~ msgid ""
#~ "The Basis shape key has the stacks"
#~ " fully retracted. Key1 has the base"
#~ " fully extended. Key2A has the left"
#~ " stack fully extended. Key2B has the"
#~ " right stack fully extended. Key2A "
#~ "and Key2B are both relative to "
#~ "Key1 (as you can see in the "
#~ "field in the bottom right of the"
#~ " Shape Keys panel."
#~ msgstr ""

#~ msgid "Object Rotation."
#~ msgstr ""

#~ msgid ""
#~ "This example is a Shape Key "
#~ "Driver. The driver was added to "
#~ "the shape key Value."
#~ msgstr ""

#~ msgid "Shape Key Driver."
#~ msgstr ""

#~ msgid "Key2a shape key."
#~ msgstr ""

#~ msgid "Key2b shape key."
#~ msgstr ""

#~ msgid ""
#~ "Press :kbd:`N` to open the properties"
#~ " region, scroll down to Drivers "
#~ "panel."
#~ msgstr ""

#~ msgid "These are some driver examples and workflow."
#~ msgstr ""

#~ msgid "Workflow"
#~ msgstr ""

#~ msgid ""
#~ "This example shows you how setup a"
#~ " transform driver. First make sure "
#~ "you are in the Front Ortho view."
#~ " :kbd:`Numpad5`, :kbd:`Numpad1`."
#~ msgstr ""

#~ msgid ""
#~ "In object mode, select then duplicate"
#~ " the default Cube. :kbd:`Shift-D`. Move "
#~ "\"Cube.001\" to a new location."
#~ msgstr ""

#~ msgid ""
#~ "With \"Cube.001\" selected, add a single"
#~ " driver to the *Rotation Y* property."
#~ msgstr ""

#~ msgid "Open the *Graph Editor*, set the Mode to *Drivers*."
#~ msgstr ""

#~ msgid ""
#~ "*Show Only Selected* is useful disabled"
#~ " for drivers, marked green in the "
#~ "picture."
#~ msgstr ""

#~ msgid ""
#~ "Press :kbd:`N` to open the Sidebar "
#~ "region, scroll down to Drivers panel."
#~ msgstr ""

#~ msgid ""
#~ "Change the *Type* to *Averaged Value*,"
#~ " this will return the averaged value"
#~ " of the driver variables."
#~ msgstr ""

#~ msgid "Modify the driver variable settings:"
#~ msgstr ""

#~ msgid "Type -- Transform Channel"
#~ msgstr ""

#~ msgid "Ob/Bone -- Cube"
#~ msgstr ""

#~ msgid "Transform Type -- X Location"
#~ msgstr ""

#~ msgid "Transform Space -- World Space"
#~ msgstr ""

#~ msgid ""
#~ "When finished, \"Cube.001\" should rotate "
#~ "on the Y axis when moving \"Cube\""
#~ " left to right."
#~ msgstr ""

#~ msgid ""
#~ "When adding multiple Drivers or for "
#~ "more advanced configurations, it is "
#~ "useful to have open the *Drivers "
#~ "Editor*."
#~ msgstr ""

#~ msgid ""
#~ "Add a Driver to the *Rotation Y*"
#~ " property of the second object with"
#~ " the context menu or with "
#~ ":kbd:`Ctrl-D`."
#~ msgstr ""

#~ msgid "Driver Expression"
#~ msgstr ""

#~ msgid ""
#~ "Here are some examples using the "
#~ "scripted expression Expr to set the "
#~ "Driver Value."
#~ msgstr ""

#~ msgid "Object rotation example."
#~ msgstr ""

#~ msgid "Orbit a Point"
#~ msgstr ""

#~ msgid ""
#~ "Here two drivers have been added "
#~ "to the Cube, X Location and Y "
#~ "Location."
#~ msgstr ""

#~ msgid "The scripted expressions are being used to set the object location."
#~ msgstr ""

#~ msgid "X Location Expr"
#~ msgstr ""

#~ msgid "``0 + (sin(frame / 8) * 4)``"
#~ msgstr ""

#~ msgid ""
#~ "``(frame/8)`` : is the current frame "
#~ "of the animation, divided by 8 to"
#~ " slow the orbit down. ``(sin( )*4)``"
#~ " : This returns the sine of "
#~ "(frame/8), then multiplies by 4 for "
#~ "a bigger circle. ``0 +`` : is "
#~ "used to control the X Location "
#~ "offset of the orbit."
#~ msgstr ""

#~ msgid "Y Location Expr"
#~ msgstr ""

#~ msgid "``0 + (cos(frame / 8) * 4)``"
#~ msgstr ""

#~ msgid ""
#~ "``(frame / 8)`` : is the current"
#~ " frame of the animation, divided by"
#~ " 8 to slow the orbit down. "
#~ "``(cos( ) * 4)`` : This returns"
#~ " the cosine of (frame/8), then "
#~ "multiplies by 4 for a bigger "
#~ "circle. ``0 +`` : is used to "
#~ "control the Y Location offset of "
#~ "the orbit."
#~ msgstr ""

#~ msgid "``frame`` is the same as bpy.context.scene.frame_current."
#~ msgstr ""

#~ msgid "Driver Namespace"
#~ msgstr ""

#~ msgid ""
#~ "There is a list of built-in "
#~ "driver functions and properties. These "
#~ "can be displayed via the Python "
#~ "Console:"
#~ msgstr ""

#~ msgid ""
#~ "This script will add a function to"
#~ " the driver namespace, which can then"
#~ " be used in the expression "
#~ "``driver_func(frame)``"
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid ""
#~ "Add a Driver to the *Rotation Y*"
#~ " property of the second object by "
#~ "right-clicking it or with :kbd:`Ctrl-D`."
#~ msgstr ""

#~ msgid "Open the *Drivers Editor* (:kbd:`Shift-F6`)."
#~ msgstr ""

#~ msgid "In the channels region, select the *Y Euler Rotation* property."
#~ msgstr ""

#~ msgid "Press :kbd:`N` to open the Sidebar region and select the *Drivers* tab."
#~ msgstr ""

#~ msgid ""
#~ "Using trigonometry, circular motion can "
#~ "be defined in 2D using the sin "
#~ "and cos functions. (See `Unit Circle "
#~ "<https://en.wikipedia.org/wiki/Unit_circle>`__)."
#~ msgstr ""

#~ msgid "Add the expression ``0 + (sin(frame / 8) * 4)``"
#~ msgstr ""

#~ msgid ""
#~ "Add a driver to the Y Location "
#~ "property with the expression ``0 + "
#~ "(cos(frame / 8) * 4)``"
#~ msgstr ""

#~ msgid ""
#~ "Make a custom function to get the"
#~ " square of a value (i.e. value\\ "
#~ ":sup:`2`). Adding the function to the"
#~ " *Driver Namespace* allows it to be"
#~ " used from driver expressions."
#~ msgstr ""

#~ msgid ""
#~ "The *Driver Namespace* has a list "
#~ "of built-in functions for use in"
#~ " driver expressions, as well as "
#~ "constants such as π and e. These"
#~ " can be inspected via the Python "
#~ "Console:"
#~ msgstr ""

#~ msgid ""
#~ "Add the following to the Text "
#~ "Editor inside Blender and press *Run "
#~ "Script*."
#~ msgstr ""

#~ msgid "Add a driver with a *Scripted Expression* such as ``square(frame)``"
#~ msgstr ""

#~ msgid ""
#~ "There are more custom function examples"
#~ " available in Blender's Text Editor "
#~ ":menuselection:`Templates > Python > Driver"
#~ " Functions`."
#~ msgstr ""

#~ msgid "Shape Key Driver"
#~ msgstr ""

#~ msgid ""
#~ "This example is a shape key "
#~ "driver. The driver was added to "
#~ "the shape key Value."
#~ msgstr ""

#~ msgid "Shape key driver example."
#~ msgstr ""

#~ msgid ""
#~ "This example uses the Armature Bone "
#~ "\"b\" 's Z Rotation to control the"
#~ " Value of a Shape Key. The bone"
#~ " rotation mode is set to XYZ "
#~ "Euler."
#~ msgstr ""

#~ msgid "The Driver F-Curve is mapped like so:"
#~ msgstr ""

#~ msgid "Bone Z Rotation 0.0 (0.0): Shape Key value 0.0"
#~ msgstr ""

#~ msgid "Bone Z Rotation -2.09 (-120.0): Shape Key value 1.0"
#~ msgstr ""

#~ msgid ""
#~ "This kind of driver can also be"
#~ " setup with the Variable Type "
#~ "Rotational Difference."
#~ msgstr ""

#~ msgid "See :doc:`Shape Keys </animation/shape_keys/index>` for more info."
#~ msgstr ""

#~ msgid "Drivers and Multiple Relative Shape Keys"
#~ msgstr ""

#~ msgid ""
#~ "The following screenshots illustrate combining"
#~ " shape keys, bones, and drivers to"
#~ " make multiple chained relative shape "
#~ "keys sharing a single root. While "
#~ "it lacks the convenience of the "
#~ "single Evaluation Time of an absolute"
#~ " shape key, it allows you to "
#~ "have more complex relationships between "
#~ "your shape keys."
#~ msgstr ""

#~ msgid ""
#~ "The Basis shape key has the stacks"
#~ " fully retracted. Key1 has the base"
#~ " fully extended. Key2A has the left"
#~ " stack fully extended. Key2B has the"
#~ " right stack fully extended. Key2A "
#~ "and Key2B are both relative to "
#~ "Key1 (as you can see in the "
#~ "field in the bottom right of the"
#~ " Shape Keys panel)."
#~ msgstr ""

#~ msgid ""
#~ "The value of Key1 is bound to "
#~ "the position of bones by a driver"
#~ " with two variables. Each variable "
#~ "uses the world Z coordinate of a"
#~ " bone and uses the maximum value "
#~ "to determine how much the base "
#~ "should be extended. The generator "
#~ "polynomial is crafted such that the "
#~ "top of the dominant stack should "
#~ "line up with the bone for that "
#~ "stack."
#~ msgstr ""

#~ msgid ""
#~ "The value of Key2A is bound to "
#~ "the position of \"Bone.L\". Its "
#~ "generator parameters are crafted such "
#~ "that when Key1's value reaches 1, "
#~ "the value of Key2A starts increasing "
#~ "beyond zero. In this way, the top"
#~ " of the left stack will move "
#~ "with bone.L (mostly)."
#~ msgstr ""

#~ msgid ""
#~ "The value of Key2B is bound to "
#~ "the position of \"Bone.R\". Its "
#~ "generator parameters are similar to "
#~ "Key2A so that the top of the "
#~ "right stack will move with bone.R "
#~ "(mostly)."
#~ msgstr ""

#~ msgid ""
#~ "Since it is quite easy for bone.L"
#~ " and bone.R to be in positions "
#~ "that indicate conflicting values for "
#~ "Key1 there will be times when the"
#~ " bones do not line up with the"
#~ " tops of their respective stacks. If"
#~ " the driver for Key1 was to use"
#~ " Average or Minimum instead of "
#~ "Maximum to determine the value of "
#~ "the shape key then \"conflicts\" between"
#~ " bone.L and bone.R would be resolved"
#~ " differently. You will choose according "
#~ "to the needs of your animation."
#~ msgstr ""

