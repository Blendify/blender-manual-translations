# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender 2.77 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.77 Manual 2.77\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-24 14:49+1000\n"
"PO-Revision-Date: 1971-01-02 00:00+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/animation/armatures/structure.rst:4
msgid "Structure"
msgstr ""

#: ../../manual/animation/armatures/structure.rst:9
msgid "Example of a very basic armature."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:11
msgid ""
"Armatures mimic real skeletons. They are made out of bones, which are (by"
" default) rigid elements. But you have more possibilities than with real "
"skeletons: In addition to the \"natural\" rotation of bones, you can also"
" move and even scale them! And your bones do not have to be connected to "
"each other; they can be completely free if you want. However, the most "
"natural and useful setups imply that some bones are related to others, "
"forming so-called \"chains of bones\", which create some sort of "
"\"limbs\" in your armature, as detailed in `Chains of Bones`_."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:26
msgid "Chains of Bones"
msgstr ""

#: ../../manual/animation/armatures/structure.rst:28
msgid ""
"The bones inside an armature can be completely independent from each "
"other (i.e. the modification of one bone does not affect the others). But"
" this is not often a useful set up: To create a leg, all bones \"after\" "
"the thigh bone should move \"with\" it in a well-coordinated manner. This"
" is exactly what happens in armatures by parenting a bone to the next one"
" in the limb, you create a \"chains of bones\". These chains can be "
"ramified. For example, five fingers attached to a single \"hand\" bone."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:38
msgid "An armature with two chains of bones."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:40
msgid ""
"Bones are chained by linking the tip of the parent to the root of the "
"child. Root and tip can be *connected*, i.e. they are always exactly at "
"the same point; or they can be *free*, like in a standard parent-child "
"object relationship."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:44
msgid ""
"A given bone can be the parent of several children, and hence be part of "
"several chains at the same time."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:47
msgid ""
"The bone at the beginning of a chain is called its *root bone*, and the "
"last bone of a chain is the *tip bone* (do not confuse them with similar "
"names of bones' joints!)."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:51
msgid ""
"Chains of bones are a particularly important topic in :doc:`posing "
"</animation/armatures/posing/index>` (especially with the standard "
"*forward kinematics* versus \"automatic\" *inverse kinematics* posing "
"techniques). You create/edit them in *Edit Mode*, but except in case of "
"connected bones, their relationships have no effect on bone "
"transformations in this mode (i.e. transforming a parent bone will not "
"affect its children)."
msgstr ""

#: ../../manual/animation/armatures/structure.rst:57
msgid ""
"The easiest way to manage bones relationships is to use the "
":ref:`Relations panel <bone-relations-parenting>` in the *Bone* tab."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Editing Bones Relationships"
#~ msgstr ""

#~ msgid "To *connect* a bone to its parent, enable its small *Con* button."
#~ msgstr ""

#~ msgid "To *unconnect* a bone, disable its *Con* button."
#~ msgstr ""

#~ msgid "Armature Structure"
#~ msgstr ""

#~ msgid ""
#~ "The bone at the beginning of a "
#~ "chain is called its *root bone*, "
#~ "and the last bone of a chain "
#~ "is the *tip bone* (do not confuse"
#~ " them with similar names of bones'"
#~ " ends!)."
#~ msgstr ""

#~ msgid ""
#~ "The easiest way to manage bones "
#~ "relationships is to use the "
#~ ":ref:`Relations panel <bone_relations_parenting>` in"
#~ " the *Bone* tab."
#~ msgstr ""

#~ msgid ""
#~ "Chains of bones are a particularly "
#~ "important topic in :doc:`posing "
#~ "</rigging/armatures/posing/index>` (especially with "
#~ "the standard *forward kinematics* versus "
#~ "\"automatic\" *inverse kinematics* posing "
#~ "techniques). You create/edit them in "
#~ "*Edit Mode*, but except in case of"
#~ " connected bones, their relationships have"
#~ " no effect on bone transformations in"
#~ " this mode (i.e. transforming a "
#~ "parent bone will not affect its "
#~ "children)."
#~ msgstr ""

#~ msgid ""
#~ "Armatures mimic real skeletons. They are"
#~ " made out of bones, which are "
#~ "(by default) rigid elements. But you "
#~ "have more possibilities than with real"
#~ " skeletons: In addition to the "
#~ "\"natural\" rotation of bones, you can"
#~ " also translate and even scale them!"
#~ " And your bones do not have to"
#~ " be connected to each other; they "
#~ "can be completely free if you "
#~ "want. However, the most natural and "
#~ "useful setups imply that some bones "
#~ "are related to others, forming so-"
#~ "called \"chains of bones\", which create"
#~ " some sort of \"limbs\" in your "
#~ "armature, as detailed in `Chains of "
#~ "Bones`_."
#~ msgstr ""

