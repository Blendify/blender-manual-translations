#
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 2.76\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-19 13:30-0500\n"
"PO-Revision-Date: 1971-01-02 00:00+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/render/materials/components/surface.rst:4
msgid "Surfaces"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:6
msgid ""
"The surface shader defines the light interaction at the surface of the "
"mesh. One or more :abbr:`BSDF (Bidirectional scattering distribution "
"function)`\\ s specify if incoming light is reflected back, refracted "
"into the mesh, or absorbed."
msgstr ""

#: ../../manual/render/materials/components/surface.rst:10
msgid ""
"Emission defines how light is emitted from the surface, allowing any "
"surface to become a light source."
msgstr ""

#: ../../manual/render/materials/components/surface.rst:15
msgid "Terminology"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:18
msgid "BSDF"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:18
msgid ""
"Stands for Bidirectional Scattering Distribution Function. It defines how"
" light is reflected and refracted at a surface."
msgstr ""

#: ../../manual/render/materials/components/surface.rst:20
msgid "Reflection"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:21
msgid "BSDFs reflect an incoming ray on the same side of the surface."
msgstr ""

#: ../../manual/render/materials/components/surface.rst:22
msgid "Transmission"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:23
msgid ""
"BSDFs transmit an incoming ray through the surface, leaving on the other "
"side."
msgstr ""

#: ../../manual/render/materials/components/surface.rst:27
msgid "Refraction"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:25
msgid ""
"BSDFs are a type of *Transmission*, transmitting an incoming ray and "
"changing its direction as it exits on the other side of the surface."
msgstr ""

#: ../../manual/render/materials/components/surface.rst:30
msgid "BSDF Parameters"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:32
msgid ""
"A major difference from non-physically-based renderers is that direct "
"light reflection from lights and indirect light reflection of other "
"surfaces are not decoupled, but rather handled using a single :abbr:`BSDF"
" (Bidirectional scattering distribution function)`. This limits the "
"possibilities a bit, but we believe overall it is helpful in creating "
"consistent-looking renders with fewer parameters to tune."
msgstr ""

#: ../../<generated>:1
msgid "Roughness"
msgstr ""

#: ../../manual/render/materials/components/surface.rst:39
msgid ""
"For the glossy :abbr:`BSDF (Bidirectional scattering distribution "
"function)`\\ s, the *roughness* parameter controls the sharpness of the "
"reflection, from 0.0 (perfectly sharp) to 1.0 (very soft)."
msgstr ""

#~ msgid "BSDF stands for bidirectional scattering distribution function."
#~ msgstr ""

#~ msgid "Reflection BSDF s"
#~ msgstr ""

#~ msgid "Transmission BSDF s"
#~ msgstr ""

#~ msgid "Refraction BSDF s are a type of Transmission,"
#~ msgstr ""

#~ msgid "It defines how light is reflected and refracted at a surface."
#~ msgstr ""

#~ msgid "Reflect an incoming ray on the same side of the surface."
#~ msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "**BSDF** stands for bidirectional scattering distribution function."
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chanches "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/cycles/nodes/types/converter/math>` and either"
#~ " setting it to *Multiply* and "
#~ "inputing the texture in both input "
#~ "sockets, or use the *Power* function "
#~ "and setting the second input to 2."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` s reflect an incoming ray"
#~ " on the same side of the "
#~ "surface."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` s transmit an incoming "
#~ "ray through the surface, leaving on "
#~ "the other side."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` s are a type of "
#~ "*Transmission*, transmitting an incoming ray"
#~ " and changing its direction as it "
#~ "exits on the other side of the "
#~ "surface."
#~ msgstr ""

#~ msgid ""
#~ "For the glossy :abbr:`BSDF (Bidirectional "
#~ "scattering distribution function)` s, the "
#~ "*roughness* parameter controls the sharpness"
#~ " of the reflection, from 0.0 "
#~ "(perfectly sharp) to 1.0 (very soft)."
#~ " Compared to *hardness* or *exponent* "
#~ "parameters, it has the advantage of "
#~ "being in the range 0.0..1.0, and "
#~ "as a result gives more linear "
#~ "control and is more easily textureable."
#~ " The relation is roughly: *roughness* "
#~ "= 1 - 1/*hardness*"
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chances "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/cycles/nodes/types/converter/math>` and either"
#~ " setting it to *Multiply* and "
#~ "inputing the texture in both input "
#~ "sockets, or use the *Power* function "
#~ "and setting the second input to 2."
#~ msgstr ""

#~ msgid ""
#~ "For the glossy :abbr:`BSDF (Bidirectional "
#~ "scattering distribution function)`\\ s, the"
#~ " *roughness* parameter controls the "
#~ "sharpness of the reflection, from 0.0"
#~ " (perfectly sharp) to 1.0 (very "
#~ "soft). Compared to *hardness* or "
#~ "*exponent* parameters, it has the "
#~ "advantage of being in the range "
#~ "0.0..1.0, and as a result gives "
#~ "more linear control and is more "
#~ "easily textureable. The relation is "
#~ "roughly: *roughness* = 1 - 1/*hardness*"
#~ msgstr ""

#~ msgid ""
#~ "stands for bidirectional scattering "
#~ "distribution function. It defines how "
#~ "light is reflected and refracted at "
#~ "a surface."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)`\\ s reflect an incoming "
#~ "ray on the same side of the "
#~ "surface."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)`\\ s transmit an incoming "
#~ "ray through the surface, leaving on "
#~ "the other side."
#~ msgstr ""

#~ msgid ""
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)`\\ s are a type of "
#~ "*Transmission*, transmitting an incoming ray"
#~ " and changing its direction as it "
#~ "exits on the other side of the "
#~ "surface."
#~ msgstr ""

#~ msgid ""
#~ "The surface shader defines the light "
#~ "interaction at the surface of the "
#~ "mesh. One or more :abbr:`BSDF "
#~ "(Bidirectional scattering distribution function)`'s"
#~ " specify if incoming light is "
#~ "reflected back, refracted into the mesh,"
#~ " or absorbed."
#~ msgstr ""

#~ msgid "Surface"
#~ msgstr ""

#~ msgid ""
#~ "A major difference from non-physically"
#~ " based renderers is that direct light"
#~ " reflection from lamps and indirect "
#~ "light reflection of other surfaces are"
#~ " not decoupled, but rather handled "
#~ "using a single :abbr:`BSDF (Bidirectional "
#~ "scattering distribution function)`. This "
#~ "limits the possibilities a bit, but "
#~ "we believe overall it is helpful "
#~ "in creating consistent-looking renders "
#~ "with fewer parameters to tune."
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chances "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/cycles/nodes/types/converter/math>` and either"
#~ " setting it to *Multiply* and "
#~ "inputing the texture in both input "
#~ "sockets, or using the *Power* function"
#~ " and setting the second input to "
#~ "2."
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chances "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/shaders/nodes/types/converter/math>` and either"
#~ " setting it to *Multiply* and "
#~ "inputing the texture in both input "
#~ "sockets, or using the *Power* function"
#~ " and setting the second input to "
#~ "2."
#~ msgstr ""

#~ msgid ""
#~ "A major difference from non-"
#~ "physically-based renderers is that direct"
#~ " light reflection from lamps and "
#~ "indirect light reflection of other "
#~ "surfaces are not decoupled, but rather"
#~ " handled using a single :abbr:`BSDF "
#~ "(Bidirectional scattering distribution function)`."
#~ " This limits the possibilities a bit,"
#~ " but we believe overall it is "
#~ "helpful in creating consistent-looking "
#~ "renders with fewer parameters to tune."
#~ msgstr ""

#~ msgid ""
#~ "For the glossy :abbr:`BSDF (Bidirectional "
#~ "scattering distribution function)`\\ s, the"
#~ " *roughness* parameter controls the "
#~ "sharpness of the reflection, from 0.0"
#~ " (perfectly sharp) to 1.0 (very "
#~ "soft). Compared to *hardness* or "
#~ "*exponent* parameters, it has the "
#~ "advantage of being in the range "
#~ "0.0 to 1.0, and as a result "
#~ "gives more linear control and is "
#~ "more easily textureable. The relation is"
#~ " roughly: *roughness* = 1 - "
#~ "1/*hardness*"
#~ msgstr ""

#~ msgid ""
#~ "Currently Blender is coded to use "
#~ "an unsquared model. So if you are"
#~ " using a :term:`Roughness Map` chances "
#~ "are that the result will not be"
#~ " accurate. To fix this, you can "
#~ "square the texture by connecting the "
#~ "texture to a :doc:`Math node "
#~ "</render/shader_nodes/converter/math>` and either "
#~ "setting it to *Multiply* and inputing"
#~ " the texture in both input sockets,"
#~ " or using the *Power* function and"
#~ " setting the second input to 2."
#~ msgstr ""

#~ msgid ""
#~ "The surface shader defines the light "
#~ "interaction at the surface of the "
#~ "mesh. One or more :abbr:`BSDF "
#~ "(Bidirectional scattering distribution function)`\\"
#~ " 's specify if incoming light is "
#~ "reflected back, refracted into the mesh,"
#~ " or absorbed."
#~ msgstr ""

