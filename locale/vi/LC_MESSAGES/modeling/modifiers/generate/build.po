# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.79 Manual
# package.
# Hoang Duy Tran <hoangduytran1960@gmail.com>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.79 Manual 2.79\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-12 16:43-0500\n"
"PO-Revision-Date: 2019-04-18 17:42+0100\n"
"Last-Translator: Hoang Duy Tran <hoangduytran1960@googlemail.com>\n"
"Language: vi\n"
"Language-Team: London, UK <hoangduytran1960@googlemail.com>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/modeling/modifiers/generate/build.rst:5
msgid "Build Modifier"
msgstr "Bộ Điều Chỉnh Xây Dựng -- Build Modifier"

#: ../../manual/modeling/modifiers/generate/build.rst:7
msgid ""
"The *Build* modifier causes the faces of the mesh object to appear or "
"disappear one after the other over time."
msgstr ""

#: ../../manual/modeling/modifiers/generate/build.rst:9
#, fuzzy
msgid ""
"By default, faces appear in the order in which they are stored in memory "
"(by default, the order of creation). The face/vertex order can be altered"
" in Edit Mode by using :ref:`Sort Mesh Elements <mesh-edit-sort-"
"elements>`."
msgstr ""
"By default, faces appear in the order in which they are stored in memory "
"(by default, the order of creation). The face/vertex order can be altered"
" in Edit Mode by selecting :doc:`Sort Mesh Elements "
"</modeling/meshes/editing/misc>` from the operator search menu "
":kbd:`Spacebar`."

#: ../../manual/modeling/modifiers/generate/build.rst:14
msgid "Options"
msgstr "Tùy Chọn -- Options"

#: ../../manual/modeling/modifiers/generate/build.rst:19
#, fuzzy
msgid "The Build modifier."
msgstr "Bộ Điều Chỉnh Xây Dựng -- Build Modifier"

#: ../../manual/modeling/modifiers/generate/build.rst:21
msgid "Start"
msgstr "Bắt Đầu -- Start"

#: ../../manual/modeling/modifiers/generate/build.rst:22
msgid "The start frame of the building process."
msgstr ""

#: ../../manual/modeling/modifiers/generate/build.rst:24
msgid "Length"
msgstr "Chiều Dài -- Length"

#: ../../manual/modeling/modifiers/generate/build.rst:24
msgid "The number of frames over which to rebuild the object."
msgstr ""

#: ../../manual/modeling/modifiers/generate/build.rst:26
msgid "Randomize"
msgstr "Ngẫu Nhiên Hóa -- Randomize"

#: ../../manual/modeling/modifiers/generate/build.rst:27
msgid "Randomizes the order in which the faces are built."
msgstr ""

#: ../../manual/modeling/modifiers/generate/build.rst:30
msgid "Seed"
msgstr "Mầm -- Seed"

#: ../../manual/modeling/modifiers/generate/build.rst:29
msgid ""
"The random seed. Changing this value gives a different \"random\" order "
"when *Randomize* is checked. This order is always the same for a given "
"seed/mesh set."
msgstr ""

#: ../../manual/modeling/modifiers/generate/build.rst:35
msgid "Reversed"
msgstr "Đảo Nghịch -- Reversed"

#: ../../manual/modeling/modifiers/generate/build.rst:33
msgid ""
"The modifier will operate in reverse, essentially allowing it to be used "
"as a \"deconstruction\" effect. This is useful for making a set of "
"instancing objects gradually disappear."
msgstr ""

#: ../../manual/modeling/modifiers/generate/build.rst:38
msgid "Example"
msgstr "Ví Dụ -- Example"

#: ../../manual/modeling/modifiers/generate/build.rst:40
msgid ""
"The Build modifier is often useful when needing a way to get a large "
"number of items to progressively appear, without resorting to animating "
"the visibility of each one by one. Examples of this include a mesh "
"containing vertices only, which is used as an :doc:`Instance Verts "
"emitter </scene_layout/object/properties/instancing/verts>`, and has the "
"Build modifier on it. Such a setup is a workaround/technique for being "
"able to art-direct some semi-random layout of a collection of objects "
"(i.e. leaves/balls forming a carpet of sorts) when doing so with "
"particles is not desirable (e.g. due to undesirable distribution of items"
" leaving random gaps and overlapping in other places)."
msgstr ""

#~ msgid ""
#~ "The Build Modifier causes the faces "
#~ "of the mesh object to appear or"
#~ " disappear one after the other over"
#~ " time."
#~ msgstr ""

#~ msgid ""
#~ "The random seed. Changing this value "
#~ "gives a different \"random\" order when"
#~ " *Randomize* is checked -- this order"
#~ " is always the same for a given"
#~ " seed/object set."
#~ msgstr ""

#~ msgid ""
#~ "The Build Modifier is often useful "
#~ "when needing a way to get a "
#~ "large number of items to progressively"
#~ " appear, without resorting to animating "
#~ "the visibility of each one by one."
#~ " Examples of this include a mesh "
#~ "containing vertices only, which is used"
#~ " as a duplivert emitter, and has "
#~ "the build modifier on it. Such a"
#~ " setup is a workaround/technique for "
#~ "being able to art-direct some "
#~ "semi-random layout of a collection of"
#~ " objects (i.e. leaves/balls forming a "
#~ "carpet of sorts) when doing so "
#~ "with particles is not desirable (e.g."
#~ " due to undesirable distribution of "
#~ "items leaving random gaps and "
#~ "overlapping in other places)."
#~ msgstr ""

#~ msgid ""
#~ "The *Build* modifier is often useful "
#~ "when needing a way to get a "
#~ "large number of items to progressively"
#~ " appear, without resorting to animating "
#~ "the visibility of each one by one."
#~ " Examples of this include a mesh "
#~ "containing vertices only, which is used"
#~ " as a :doc:`duplivert emitter "
#~ "</scene_layout/object/properties/duplication/dupliverts>`, and"
#~ " has the build modifier on it. "
#~ "Such a setup is a workaround/technique"
#~ " for being able to art-direct "
#~ "some semi-random layout of a "
#~ "collection of objects (i.e. leaves/balls "
#~ "forming a carpet of sorts) when "
#~ "doing so with particles is not "
#~ "desirable (e.g. due to undesirable "
#~ "distribution of items leaving random "
#~ "gaps and overlapping in other places)."
#~ msgstr ""

#~ msgid ""
#~ "The *Build* modifier is often useful "
#~ "when needing a way to get a "
#~ "large number of items to progressively"
#~ " appear, without resorting to animating "
#~ "the visibility of each one by one."
#~ " Examples of this include a mesh "
#~ "containing vertices only, which is used"
#~ " as a :doc:`Instance Verts emitter "
#~ "</scene_layout/object/properties/instancing/verts>`, and "
#~ "has the build modifier on it. Such"
#~ " a setup is a workaround/technique "
#~ "for being able to art-direct some"
#~ " semi-random layout of a collection"
#~ " of objects (i.e. leaves/balls forming "
#~ "a carpet of sorts) when doing so"
#~ " with particles is not desirable "
#~ "(e.g. due to undesirable distribution of"
#~ " items leaving random gaps and "
#~ "overlapping in other places)."
#~ msgstr ""

#~ msgid ""
#~ "The *Build* modifier is often useful "
#~ "when needing a way to get a "
#~ "large number of items to progressively"
#~ " appear, without resorting to animating "
#~ "the visibility of each one by one."
#~ " Examples of this include a mesh "
#~ "containing vertices only, which is used"
#~ " as an :doc:`Instance Verts emitter "
#~ "</scene_layout/object/properties/instancing/verts>`, and "
#~ "has the build modifier on it. Such"
#~ " a setup is a workaround/technique "
#~ "for being able to art-direct some"
#~ " semi-random layout of a collection"
#~ " of objects (i.e. leaves/balls forming "
#~ "a carpet of sorts) when doing so"
#~ " with particles is not desirable "
#~ "(e.g. due to undesirable distribution of"
#~ " items leaving random gaps and "
#~ "overlapping in other places)."
#~ msgstr ""

#~ msgid ""
#~ "The modifier will operate in reverse,"
#~ " essentially allowing it to be used"
#~ " as a \"deconstruction\" effect. This "
#~ "is useful for making a set of "
#~ "dupli-objects gradually disappear."
#~ msgstr ""

