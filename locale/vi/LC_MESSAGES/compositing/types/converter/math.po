# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is licensed under a CC-BY-SA 4.0 Int. License
# This file is distributed under the same license as the Blender 2.79 Manual
# package.
# Hoang Duy Tran <hoangduytran1960@gmail.com>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.79 Manual 2.79\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-12 16:43-0500\n"
"PO-Revision-Date: 2019-04-24 02:16+0100\n"
"Last-Translator: Hoang Duy Tran <hoangduytran1960@googlemail.com>\n"
"Language: vi\n"
"Language-Team: London, UK <hoangduytran1960@googlemail.com>\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/compositing/types/converter/math.rst:9
msgid "Math Node"
msgstr "Nút Toán -- Math Node"

#: ../../manual/compositing/types/converter/math.rst:14
msgid "Math node."
msgstr "Nút Toán."

#: ../../manual/compositing/types/converter/math.rst:16
msgid "The *Math Node* performs math operations."
msgstr "*Nút Toán* (Math Node) thực hiện các phép toán."

#: ../../manual/compositing/types/converter/math.rst:20
msgid "Inputs"
msgstr "Đầu Vào -- Inputs"

#: ../../manual/compositing/types/converter/math.rst:23
#: ../../manual/compositing/types/converter/math.rst:29
#: ../../manual/compositing/types/converter/math.rst:101
msgid "Value"
msgstr "Giá Trị -- Value"

#: ../../manual/compositing/types/converter/math.rst:23
msgid ""
"First numerical value. The trigonometric functions accept values in "
"radians."
msgstr ""
"Giá trị số đầu tiên. Các hàm lượng giác chấp nhận các giá trị theo đơn vị"
" rad."

#: ../../manual/compositing/types/converter/math.rst:26
msgid ""
"Second numerical value. This value is **not** used in functions that "
"accept only one parameter like the trigonometric functions, Round and "
"Absolute."
msgstr ""
"Giá trị số thứ hai. Giá trị này **không** được sử dụng trong các hàm chỉ "
"chấp nhận một tham số, như các hàm lượng giác, hàm Làm Tròn Số (Round) và"
" hàm tính số Tuyệt Đối (Absolute)."

#: ../../manual/compositing/types/converter/math.rst:32
msgid "Properties"
msgstr "Tính Chất -- Properties"

#: ../../manual/compositing/types/converter/math.rst:90
msgid "Operation"
msgstr "Thao Tác -- Operation"

#: ../../manual/compositing/types/converter/math.rst:35
msgid ""
"Mathematical operation to use; see below for a list of supported "
"operations:"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:40
msgid "**Functions**"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:41
msgid "`Add <https://en.wikipedia.org/wiki/Addition>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:42
msgid "`Subtract <https://en.wikipedia.org/wiki/Subtraction>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:43
msgid "`Multiply <https://en.wikipedia.org/wiki/Multiplication>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:44
msgid "`Divide <https://en.wikipedia.org/wiki/Division_(mathematics)>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:45
#, python-format
msgid ""
"`Multiply Add "
"<https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:46
msgid "`Power <https://en.wikipedia.org/wiki/Exponential_function>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:47
msgid "`Logarithm <https://en.wikipedia.org/wiki/Logarithm>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:48
msgid "`Square Root <https://en.wikipedia.org/wiki/Square_root>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:49
msgid "`Inverse Square Root <https://en.wikipedia.org/wiki/Square_root>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:50
msgid "`Absolute <https://en.wikipedia.org/wiki/Absolute_value>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:51
msgid "`Exponent <https://en.wikipedia.org/wiki/E_(mathematical_constant)>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:53
msgid "**Comparison**"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:54
msgid "`Minimum <https://en.wikipedia.org/wiki/Maxima_and_minima>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:55
msgid "`Maximum <https://en.wikipedia.org/wiki/Maxima_and_minima>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:56
msgid "`Less Than <https://en.wikipedia.org/wiki/Inequality_(mathematics)>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:57
msgid "`Greater Than <https://en.wikipedia.org/wiki/Inequality_(mathematics)>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:58
msgid "`Sign <https://en.wikipedia.org/wiki/Sign_function>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:59
msgid "`Compare <https://en.wikipedia.org/wiki/Comparison_function>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:60
msgid "`Smooth Minimum <https://en.wikipedia.org/wiki/Smooth_maximum>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:61
msgid "`Smooth Maximum <https://en.wikipedia.org/wiki/Smooth_maximum>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:66
msgid "**Rounding**"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:67
msgid "`Round <https://en.wikipedia.org/wiki/Round_function>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:68
msgid "`Floor <https://en.wikipedia.org/wiki/Floor_and_ceiling_functions>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:69
msgid "`Ceil <https://en.wikipedia.org/wiki/Floor_and_ceiling_functions>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:70
msgid "`Truncate <https://en.wikipedia.org/wiki/Truncation>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:71
msgid "`Fraction <https://en.wikipedia.org/wiki/Rational_function>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:72
msgid "`Modulo <https://en.wikipedia.org/wiki/Modulo_operation>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:73
msgid "`Snap <https://en.wikipedia.org/wiki/Rounding>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:74
msgid "`Wrap <https://en.wikipedia.org/wiki/Rounding>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:75
msgid "`Pingpong <https://en.wikipedia.org/wiki/Rounding>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:79
msgid "**Conversion**"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:80
msgid ""
"`To Radians "
"<https://en.wikipedia.org/wiki/Radian#Conversion_between_radians_and_degrees>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:81
msgid ""
"`To Degrees "
"<https://en.wikipedia.org/wiki/Radian#Conversion_between_radians_and_degrees>`__"
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:94
msgid "Clamp"
msgstr "Hạn Định -- Clamp"

#: ../../manual/compositing/types/converter/math.rst:93
msgid "Limits the output to the range (0 to 1). See :term:`clamp`."
msgstr "Giới hạn đầu ra nằm trong phạm vi (0 đến 1). Xin xem :term:`clamp`."

#: ../../manual/compositing/types/converter/math.rst:97
msgid "Outputs"
msgstr "Đầu Ra -- Outputs"

#: ../../manual/compositing/types/converter/math.rst:100
msgid "Numerical value output."
msgstr "Giá trị số cung cấp ở đầu ra."

#: ../../manual/compositing/types/converter/math.rst:104
msgid "Examples"
msgstr "Ví Dụ -- Examples"

#: ../../manual/compositing/types/converter/math.rst:107
msgid "Manual Z-Mask"
msgstr "Chắn Lọc Z Thủ Công -- Manual Z-Mask"

#: ../../manual/compositing/types/converter/math.rst:111
msgid "Minimum and maximum function example."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:113
msgid ""
"This example has one scene input by the top *Render Layers* node, which "
"has a cube that is about 10 units from the camera. The bottom *Render "
"Layers* node inputs a scene with a plane that covers the left half of the"
" view and is 7 units from the camera. Both are fed through their "
"respective *Map Value* nodes to divide the Z-buffer by 20 (multiply by "
"0.05, as shown in the Size field) and clamped to be a min/max of 0.0/1.0 "
"respectively."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:121
msgid ""
"For the minimum function, the node selects those Z values where the "
"corresponding pixel is closer to the camera; so it chooses the Z values "
"for the plane and part of the cube. The background has an infinite Z "
"value, so it is clamped to 1.0 (shown as white). In the maximum example, "
"the Z values of the cube are greater than the plane, so they are chosen "
"for the left side, but the plane *Render Layers* Z are infinite (mapped "
"to 1.0) for the right side, so they are chosen."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:131
msgid "Using Sine Function to Pulsate"
msgstr "Dùng Hàm Sin để Tạo Xung -- Using Sine Function to Pulsate"

#: ../../manual/compositing/types/converter/math.rst:135
msgid "Using sine function example."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:137
msgid ""
"This example has a *Time* node putting out a linear sequence from 0 to 1 "
"over the course of 101 frames. At frame 25, the output value is 0.25. "
"That value is multiplied by 2 × pi (6.28) and converted to 1.0 by the "
"Sine function, since we all know that :math:`sin(2 × pi/ 4) = sin(pi/ 2) "
"= +1.0`."
msgstr ""
"This example has a *Time* node putting out a linear sequence from 0 to 1 "
"over the course of 101 frames. At frame 25, the output value is 0.25. "
"That value is multiplied by 2 × pi (6.28) and converted to 1.0 by the "
"Sine function, since we all know that :math:`sin(2 × pi/ 4) = sin(pi/ 2) "
"= +1.0`."

#: ../../manual/compositing/types/converter/math.rst:142
msgid ""
"Since the sine function can put out values between (-1.0 to 1.0), the "
"*Map Value* node scales that to 0.0 to 1.0 by taking the input (-1 to 1),"
" adding 1 (making 0 to 2), and multiplying the result by one-half (thus "
"scaling the output between 0 to 1). The default *Color Ramp* converts "
"those values to a gray-scale. Thus, medium gray corresponds to a 0.0 "
"output by the sine, black to -1.0, and white to 1.0. As you can see, "
":math:`sin(pi/ 2) = 1.0`. Like having your own visual color calculator! "
"Animating this node setup provides a smooth cyclic sequence through the "
"range of grays."
msgstr ""
"Since the sine function can put out values between (-1.0 to 1.0), the "
"*Map Value* node scales that to 0.0 to 1.0 by taking the input (-1 to 1),"
" adding 1 (making 0 to 2), and multiplying the result by one-half (thus "
"scaling the output between 0 to 1). The default *Color Ramp* converts "
"those values to a gray-scale. Thus, medium gray corresponds to a 0.0 "
"output by the sine, black to -1.0, and white to 1.0. As you can see, "
":math:`sin(pi/ 2) = 1.0`. Like having your own visual color calculator! "
"Animating this node setup provides a smooth cyclic sequence through the "
"range of grays."

#: ../../manual/compositing/types/converter/math.rst:150
msgid ""
"Use this function to vary, for example, the alpha channel of an image to "
"produce a fading in/out effect. Alter the Z channel to move a scene "
"in/out of focus. Alter a color channel value to make a color \"pulse\"."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:157
msgid "Brightening (Scaling) a Channel"
msgstr "Làm Sáng (Đổi Tỷ Lệ) một Kênh -- Brightening (Scaling) a Channel"

#: ../../manual/compositing/types/converter/math.rst:161
msgid "Scaling a channel example."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:163
msgid ""
"This example has a *Math (Multiply)* node increasing the luminance "
"channel (Y) of the image to make it brighter. Note that you should use a "
"*Map Value node* with min() and max() enabled to clamp the output to "
"valid values. With this approach, you could use a logarithmic function to"
" make a high dynamic range image. For this particular example, there is "
"also a *Bright/Contrast node* that might give simpler control over "
"brightness."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:172
msgid "Restrict Color Selection (Posterization)"
msgstr ""
"Hạn Chế sự Lựa Chọn Màu Sắc (Áp Phích Hóa) -- Restrict Color Selection "
"(Posterization)"

#: ../../manual/compositing/types/converter/math.rst:176
msgid "Posterization example."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:178
msgid ""
"In this example, we restrict the color values to be one of the six "
"values: 0, 0.2, 0.4, 0.6, 0.8, 1."
msgstr ""
"In this example, we restrict the color values to be one of the six "
"values: 0, 0.2, 0.4, 0.6, 0.8, 1."

#: ../../manual/compositing/types/converter/math.rst:180
msgid ""
"To split up a continuous range of values between 0 and 1 to certain set "
"of values, the following function is used: :math:`round(x × n - 0.5) / (n"
" - 1)`, where \"n\" is the number of possible output values, and \"x\" is"
" the input pixel color. `Read more about this function "
"<https://en.blender.org/index.php/Doc:2.4/Manual/Composite_Nodes/Types/Convertor#Quantize.2FRestrict_Color_Selection>`__."
msgstr ""
"To split up a continuous range of values between 0 and 1 to certain set "
"of values, the following function is used: :math:`round(x × n - 0.5) / (n"
" - 1)`, where \"n\" is the number of possible output values, and \"x\" is"
" the input pixel color. `Read more about this function "
"<https://en.blender.org/index.php/Doc:2.4/Manual/Composite_Nodes/Types/Convertor#Quantize.2FRestrict_Color_Selection>`__."

#: ../../manual/compositing/types/converter/math.rst:186
msgid ""
"To implement this function in Blender, consider the node setup above. We "
"string the Math nodes into a function that takes each color (values from "
"0 to 1), multiplies it up by six, the desired number of divisions (values"
" become from 0 to 6), offsets it by 0.5 (-0.5 to 5.5), rounds the value "
"to the nearest whole number (produces 0, 1, 2, 3, 4, 5), and then divides"
" the image pixel color by five (0.0, 0.2, 0.4, 0.6, 0.8, 1.0)."
msgstr ""

#: ../../manual/compositing/types/converter/math.rst:193
msgid ""
"In the case of a color image, you need split it into separate RGB "
"channels using *Separate/Combine RGBA* nodes and perform this operation "
"on each channel independently."
msgstr ""

#~ msgid ""
#~ "This example has one scene input "
#~ "by the top *Render Layers* node, "
#~ "which has a cube that is about "
#~ "10 BU from the camera. The bottom"
#~ " *Render Layers* node inputs a scene"
#~ " with a plane that covers the "
#~ "left half of the view and is "
#~ "7 BU from the camera. Both are "
#~ "fed through their respective *Map Value*"
#~ " nodes to divide the Z-buffer by "
#~ "20 (multiply by 0.05, as shown in"
#~ " the Size field) and clamped to "
#~ "be a min/max of 0.0/1.0 respectively."
#~ msgstr ""

#~ msgid ""
#~ "To implement this function in Blender,"
#~ " consider the node setup above. We"
#~ " string the math nodes into a "
#~ "function that takes each color (values"
#~ " from 0 to 1), multiplies it up"
#~ " by six, the desired number of "
#~ "divisions (values become from 0 to "
#~ "6), offsets it by 0.5 (-0.5 to "
#~ "5.5), rounds the value to the "
#~ "nearest whole number (produces 0, 1, "
#~ "2, 3, 4, 5), and then divides "
#~ "the image pixel color by five "
#~ "(0.0, 0.2, 0.4, 0.6, 0.8, 1.0)."
#~ msgstr ""

#~ msgid ""
#~ "Add, Subtract, Multiply, Divide, Sine, "
#~ "Cosine, Tangent, Arcsine, Arccosine, "
#~ "Arctangent, Arctangent2, Power, Logarithm, "
#~ "Minimum, Maximum, Round, Less Than, "
#~ "Greater Than, Modulo, Absolute"
#~ msgstr ""
#~ "Cộng, Trừ, Nhân, Chia, Sin, Cos, "
#~ "Tang, Arcsin, Arccos, Arctan, Arctan2, "
#~ "Lũy Thừa, Logarit, Tối thiểu, Tối "
#~ "đa, Tròn, Nhỏ hơn, Lớn hơn, "
#~ "Modulo, Tuyệt đối"

