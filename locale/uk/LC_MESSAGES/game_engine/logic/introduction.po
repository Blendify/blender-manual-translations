#
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.78 Manual 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-20 11:33+1100\n"
"PO-Revision-Date: 2018-02-05 17:18+0200\n"
"Last-Translator: urko <urkokul@gmail.com>\n"
"Language: uk\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"X-Generator: Poedit 2.0.6\n"

#: ../../manual/game_engine/logic/introduction.rst:3
msgid "Introduction"
msgstr "Вступ"

#: ../../manual/game_engine/logic/introduction.rst:6
msgid "*Game Logic* is the default scripting layer in the Game Engine. Each *Game Object* in the game may store a collection of logical components (Logic Bricks) which control its behavior within the scene. Logic bricks can be combined to perform user-defined actions that determine the progression of the simulation."
msgstr "*Game Logic* -- Логіка Гри -- це стандартний шар скриптування у Рушії Ігор. Кожен ігровий об'єкт *Game Object* у грі може зберігати колекцію логічних компонентів (Цеглин Логіки -- Logic Bricks), яка керує його поведінкою у межах сцени. Цеглини логіки можуть комбінуватися для здійснення визначених користувачем дій, що визначають прогресію симуляції."

#: ../../manual/game_engine/logic/introduction.rst:12
msgid "Logic Bricks"
msgstr "Цеглини Логіки -- Logic Bricks"

#: ../../manual/game_engine/logic/introduction.rst:15
msgid "The main part of game logic can be set up through a graphical interface the :doc:`Logic Editor </editors/logic_editor>`, and therefore does not require detailed programming knowledge. Logic is set up as blocks (or \"bricks\") which represent preprogrammed functions; these can be tweaked and combined to create the game/application. There are three types of logic brick: :doc:`Sensors </game_engine/logic/sensors/introduction>`, :doc:`Controllers </game_engine/logic/controllers/introduction>` and :doc:`Actuators </game_engine/logic/actuators/introduction>`. Sensors are primitive event listeners, which are triggered by specific events, such as a collision, a key press or mouse movement. Controllers carry out logic operations on sensor output, and trigger connected actuators when their operating conditions are met. Actuators interact with the simulation directly, and are the only components in the game which are able to do so (other than the Python controller, and other simulation components such as Physics)."
msgstr "Головна частина ігрової логіки може бути укладена через графічний інтерфейс Редактора Логіки -- :doc:`Logic Editor </editors/logic_editor>`, а тому не вимагає докладного знання програмування. Логіка викладається у вигляді блоків (або «цеглин»), які представляють наперед запрограмовані функції; вони можуть бути підлаштовані та скомбіновані для створення гри/застосунку. Існує три типи цеглин логіки: Сенсори -- :doc:`Sensors </game_engine/logic/sensors/introduction>`, Контролери -- :doc:`Controllers </game_engine/logic/controllers/introduction>` та Актуатори -- :doc:`Actuators </game_engine/logic/actuators/introduction>`. Сенсори -- sensors -- це примітивні слухачі подій, які запускаються певними подіями, такими як зіткнення, натиснення клавіші або переміщення миші. Контролери -- controllers -- виконують логічні операції з виводом сенсора та запускають під'єднані актуатори, коли є відповідні умови роботи для останніх. Актуатори взаємодіють із симуляцією безпосередньо і є єдиними компонентами у грі, які можуть це робити (окрім контролера Python та інших компонентів симуляції як Фізика)."

#: ../../manual/game_engine/logic/introduction.rst:29
msgid "Properties"
msgstr "Властивості -- Properties"

#: ../../manual/game_engine/logic/introduction.rst:32
msgid ":doc:`Properties </game_engine/logic/properties>` are like variables in other programming languages. They are used to save and access data values either for the whole game (e.g. scores), or for particular objects/players (e.g. names). However, in the Blender Game Engine, a property is associated with an object. Properties can be of different types, and are set up in a special area of the :doc:`Logic Editor </editors/logic_editor>`."
msgstr ":doc:`Properties </game_engine/logic/properties>` -- властивості -- це як змінні в інших мовах програмування. Вони використовуються для збереження та доступу до значень даних для всієї гри (наприклад, балів) або для конкретних об'єктів/гравців (наприклад, імена). Однак, у рушії Blender Game Engine властивість асоціюється з об'єктом. Властивості можуть бути різних типів та установлюються у спеціальній області редактора :doc:`Logic Editor </editors/logic_editor>`."

#: ../../manual/game_engine/logic/introduction.rst:40
msgid "States"
msgstr "Стани -- States"

#: ../../manual/game_engine/logic/introduction.rst:43
msgid "Another useful feature is object :doc:`States </game_engine/logic/states>`. At any time while the simulation is running, the object will process any logic which belongs to the current state of the object. States can be used to define groups of behavior -- e.g. an actor object may be \"sleeping\", \"awake\" or \"dead\", and its logic behavior may be different in each of these three states. The states of an object are set up, displayed and edited in the Controller logic bricks for the object."
msgstr "Іншою корисною функціональною можливістю є стани -- :doc:`States </game_engine/logic/states>` об'єктів. У будь-який момент виконання симуляції об'єкт буде обробляти будь-яку логіку, яка належить до поточного стану об'єкта. Стани можуть використовуватися для визначення груп поведінки -- наприклад, об'єкт актора може бути «сплячим», «пробудженим» або «мертвим», а логічна його поведінка може відрізнятися у кожному з цих трьох станів. Стани об'єкта укладаються, показуються та редагуються у цеглинах логіки типу Controller для цього об'єкта."
