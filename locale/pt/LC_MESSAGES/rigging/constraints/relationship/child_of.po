# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender 2.77 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.77 Manual 2.77\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-05 17:14+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../manual/rigging/constraints/relationship/child_of.rst:6
msgid "Child Of Constraint"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:8
msgid ""
"*Child Of* is the constraint version of the standard parent/children "
"relationship between objects (the one established through the "
":kbd:`Ctrl-P` shortcut, in the 3D views)."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:11
msgid ""
"Parenting with a constraint has several advantages and enhancements, "
"compared to the traditional method:"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:14
msgid ""
"You can have several different parents for the same object (weighting "
"their respective influence with the *Influence* slider)."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:16
msgid ""
"As with any constraint, you can key (i.e. animate) its Influence setting."
" This allows the object which has a Child Of constraint upon it to change"
" over time which target object will be considered the parent, and "
"therefore have influence over the Child Of constrained object."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:23
msgid ""
"Don't confuse this \"basic\" object parenting with the one that defines "
"the :ref:`chains of bones <armature-bone_chain>` inside of an armature. "
"This constraint is used to parent an object to a bone (the so-called "
":doc:`object skinning </rigging/skinning/objects>`), or even bones to "
"bones. But don't try to use it to define chains of bones."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:31
msgid "Options"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:36
msgid "Child Of panel."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:43
msgid "Target"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:40
msgid ""
"The target object that this object will act as a child of. This "
"constraint uses one target, and is not functional (red state) when it has"
" none. If *Target* is an armature or a mesh, a new name field appears "
"where a name of a *Bone* or a *Vertex Group* can be selected."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:45
msgid "Location X, Y, Z"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:46
msgid ""
"Each of these buttons will make the parent affect or not affect the "
"location along the corresponding axis."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:47
msgid "Rotation X, Y, Z"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:48
msgid ""
"Each of these buttons will make the parent affect or not affect the "
"rotation around the corresponding axis."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:50
msgid "Scale X, Y, Z"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:50
msgid ""
"Each of these buttons will make the parent affect or not affect the scale"
" along the corresponding axis."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:56
msgid "Set Inverse"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:53
msgid ""
"By default, when you parent your owner to your target, the target becomes"
" the origin of the owner's space. This means that the location, rotation "
"and scale of the owner are offset by the same properties of the target. "
"In other words, the owner is transformed when you parent it to your "
"target. This might not be desired! So, if you want to restore your owner "
"to its before-parenting state, click on the *Set Inverse* button."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:61
msgid "Clear Inverse"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:59
msgid ""
"This button reverses (cancels) the effects of the above one, restoring "
"the owner/child to its default state regarding its target/parent."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:64
msgid "Tips"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:67
msgid ""
"When creating a new parent relationship using this constraint, it is "
"usually necessary to click on the *Set Inverse* button after assigning "
"the parent. As noted above, this cancels out any unwanted transform from "
"the parent, so that the owner returns to the location/rotation/scale it "
"was in before the constraint was applied. Note that you should apply *Set"
" Inverse* with all other constraints disabled (their *Influence* set to "
"**0.0**) for a particular *Child Of* constraint, and before transforming "
"the target/parent (see example below)."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:76
msgid ""
"About the toggle buttons that control which target's (i.e. parent's) "
"individual transform properties affect the owner, it is usually best to "
"leave them all enabled, or to disable all three of the given Location, "
"Rotation or Scale transforms."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:83
msgid "Technical Note"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:85
msgid ""
"If you use this constraint with all channels on, it will use a straight "
"matrix multiplication for the parent relationship, not decomposing the "
"parent matrix into loc/rot/size. This ensures any transformation "
"correctly gets applied, also for combinations of rotated and non-uniform "
"scaled parents."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:93
msgid "Examples"
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:99
msgid ""
"**1. No constraint** Note the position of ``Owner`` empty - ``1.0`` BU "
"along X and Y axes."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:104
msgid ""
"**2.** *Child Of* **just added** Here you can see that ``Owner`` empty is"
" now **1.0 BU** away from ``Target_1`` empty along X and Y axes."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:109
msgid ""
"**3. Offset set** *Set Inverse* has been clicked, and ``Owner`` is back "
"to its original position."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:114
msgid ""
"**4. Target/parent transformed** ``Target_1`` has been translated in the "
"XY plane, rotated around the Z axis, and scaled along its *local* X axis."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:120
msgid ""
"**5. Offset cleared** *Clear Inverse* has been clicked - ``Owner`` is "
"fully again controlled by ``Target_1``."
msgstr ""

#: ../../manual/rigging/constraints/relationship/child_of.rst:125
msgid ""
"**6. Offset set again** *Set Offset* has been clicked again. As you can "
"see, it does not gives the same result as in (*Target/parent "
"transformed*). As noted above, use *Set Inverse* only once, before "
"transforming your target/parent."
msgstr ""

