# Этот файл является частью перевода руководства к Blender'у.
# Соответствующая страница руководства может быть получена по адресу
#
#
# https://docs.blender.org/manual/ru/dev/render/cycles/materials/introduction.html
# Этот файл распространяется под всемирной лицензией CC-BY-SA 4.0
# https://creativecommons.org/licenses/by-sa/4.0/deed.ru
# Список переводчиков
# ===================
# Mingun <alexander_sergey@mail.ru>, 2016.
msgid ""
msgstr ""
"Project-Id-Version: Руководство по Blender 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-30 09:48+1000\n"
"PO-Revision-Date: 2016-07-08 22:51+0500\n"
"Last-Translator: Mingun <alexander_sergey@mail.ru>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../manual/render/materials/introduction.rst:5
msgid "Introduction"
msgstr "Введение"

#: ../../manual/render/materials/introduction.rst:7
msgid ""
"Materials control the appearance of meshes, curves, volumes and other "
"objects. They define the substance that the object is made of, its color "
"and texture, and how light interacts with it."
msgstr ""

#: ../../manual/render/materials/introduction.rst:11
msgid ""
"Physically based materials can be created using the :doc:`Principled BSDF"
" </render/shader_nodes/shader/principled>`, :doc:`Principled Hair "
"</render/shader_nodes/shader/hair_principled>`, and :doc:`Principled "
"Volume </render/shader_nodes/shader/volume_principled>` shaders. With "
"these uber shaders, a wide variety of materials including plastic, glass,"
" metal, cloth, skin, hair, smoke and fire can be created."
msgstr ""

#: ../../manual/render/materials/introduction.rst:18
msgid ""
"A flexible :doc:`shading nodes </render/shader_nodes/introduction>` "
"system is used to set up textures and create entirely different types of "
"materials like toon shading."
msgstr ""

#: ../../manual/render/materials/introduction.rst:23
msgid "Setting up Materials"
msgstr ""

#: ../../manual/render/materials/introduction.rst:25
msgid ""
"Materials can be created in either the :doc:`Material properties "
"</editors/properties_editor>`, or in the :doc:`Shader Editor "
"</editors/shader_editor/index>`. These provide a different view of the "
"same shader nodes and material settings."
msgstr ""

#: ../../manual/render/materials/introduction.rst:29
msgid ""
"The defaults Shading workspace has a shader editor and a 3D Viewport that"
" can be set to LookDev or Rendered shading, to interactively preview how "
"the material interacts with objects and lights in the scene."
msgstr ""

#: ../../manual/render/materials/introduction.rst:33
msgid ""
"Materials are data-blocks that can be :doc:`assigned "
"</render/materials/assignment>` to one or more objects, and different "
"materials can be assigned to different parts of meshes."
msgstr ""

#: ../../manual/render/materials/introduction.rst:36
msgid ""
"Image textures can be created from scratch in :doc:`texture paint mode "
"</sculpt_paint/texture_paint/index>`, or by loading in existing images "
"with the :doc:`Image Texture node </render/shader_nodes/textures/image>`."
" A variety of :doc:`procedural texture nodes "
"</render/shader_nodes/textures/index>` is also available."
msgstr ""

#: ../../manual/render/materials/introduction.rst:42
msgid "Components"
msgstr ""

#: ../../manual/render/materials/introduction.rst:44
msgid ""
"Materials consist of three shaders, defining the appearance of the "
"surface, the volume inside the object, and the displacement of the "
"surface."
msgstr ""

#: ../../manual/render/materials/introduction.rst:52
msgid "Surface Shader"
msgstr ""

#: ../../manual/render/materials/introduction.rst:54
msgid ""
"The :doc:`surface shader </render/materials/components/surface>` controls"
" the textures and light interaction at the surface of the mesh."
msgstr ""

#: ../../manual/render/materials/introduction.rst:59
msgid "Volume Shader"
msgstr ""

#: ../../manual/render/materials/introduction.rst:61
msgid ""
"The :doc:`volume shader </render/materials/components/volume>` defines "
"the interior of the mesh. A material can have just a volume shader for "
"cases like smoke and fire, or it can be combined with a surface shader "
"for materials like cloudy glass."
msgstr ""

#: ../../manual/render/materials/introduction.rst:67
msgid "Displacement"
msgstr ""

#: ../../manual/render/materials/introduction.rst:69
msgid ""
"The shape of the surface and the volume inside it may be altered by "
":doc:`displacement </render/materials/components/displacement>`. This "
"way, textures can then be used to make the mesh surface more detailed."
msgstr ""

#: ../../manual/render/materials/introduction.rst:73
msgid ""
"Depending on the settings, the displacement may be virtual, only "
"modifying the surface normals to give the impression of displacement, "
"which is known as bump mapping, or a combination of real and virtual "
"displacement."
msgstr ""

#: ../../manual/render/materials/introduction.rst:79
msgid "Physically Based Shading"
msgstr ""

#: ../../manual/render/materials/introduction.rst:81
msgid ""
"The material system is built with physically-based rendering in mind, "
"separating how a material looks and which rendering algorithm is used to "
"render it. This makes it easier to achieve realistic results and balanced"
" lighting, though there are a few things to keep in mind."
msgstr ""

#: ../../manual/render/materials/introduction.rst:86
msgid ""
"In order for materials to work well with global illumination, they should"
" be energy conserving. That means they cannot reflect more light than "
"comes in. This property is not strictly enforced, but if colors are in "
"the range 0.0 to 1.0, and :abbr:`BSDF (Bidirectional scattering "
"distribution function)`\\ s are only mixed together with the Mix Shader "
"node, this will automatically be true."
msgstr ""

#: ../../manual/render/materials/introduction.rst:92
msgid ""
"It is however, possible to break this, with color values higher than 1.0 "
"or using the Add Shader node, but one must be careful when doing this to "
"keep materials behaving predictably under various lighting conditions."
msgstr ""

#~ msgid ""
#~ "Materials define the appearance of "
#~ "meshes, curves and other objects. They"
#~ " consist of three shaders, defining "
#~ "the appearance of the surface of "
#~ "the mesh, the volume inside the "
#~ "mesh, and displacement of the surface"
#~ " of the mesh."
#~ msgstr ""
#~ "Материалы определяют внешний вид полисеток,"
#~ " кривых и других объектов. Они "
#~ "состоят из трёх шейдеров, определяющих "
#~ "внешний вид поверхности полисетки, объём "
#~ "внутри полисетки и смещение поверхности "
#~ "полисетки."

#~ msgid ""
#~ "First, you can set the :doc:`Properties"
#~ " </render/blender_render/materials/properties/introduction>` "
#~ "in the various Material panels."
#~ msgstr ""

#~ msgid ""
#~ "Second, you can use :doc:`Nodes "
#~ "</render/blender_render/materials/nodes/index>`; a "
#~ "graphical nodes editor is available."
#~ msgstr ""

#~ msgid ""
#~ "Last, you can directly set the "
#~ "color of object surfaces using various"
#~ " special effects. Strictly speaking, these"
#~ " are not materials at all, but "
#~ "they are included here because they "
#~ "affect the appearance of your objects."
#~ " These include :ref:`Vertex Painting "
#~ "<painting-vertex-index>`, :doc:`Wire Rendering"
#~ " </render/blender_render/materials/special_effects/wire>`, "
#~ ":doc:`Volume Rendering "
#~ "</render/blender_render/materials/special_effects/volume>`, and"
#~ " :doc:`Halo Rendering "
#~ "</render/blender_render/materials/special_effects/halo>`."
#~ msgstr ""

#~ msgid ":doc:`Surface Shader </render/cycles/materials/surface>`."
#~ msgstr ":doc:`Шейдер поверхности </render/cycles/materials/surface>`."

#~ msgid ":doc:`Volume Shader </render/cycles/materials/volume>`."
#~ msgstr ":doc:`Шейдер объёма </render/cycles/materials/volume>`."

#~ msgid ":doc:`Displacement </render/cycles/materials/displacement>`."
#~ msgstr ":doc:`Шейдер смещения </render/cycles/materials/displacement>`."

#~ msgid ""
#~ "In Blender, materials can (optionally) "
#~ "have associated textures. Textures *describe*"
#~ " the substance: e.g. *polished* brass, "
#~ "*dirty* glass or *embroidered* linen. "
#~ "The :doc:`Textures </editors/uv_image/uv/textures/index>`"
#~ " chapter describes how to add "
#~ "textures to materials."
#~ msgstr ""

#~ msgid ""
#~ "First, you can set the :doc:`Settings"
#~ " </render/cycles/materials/settings>` in the "
#~ "various Material panels."
#~ msgstr ""

#~ msgid ""
#~ "Second, you can use :doc:`Nodes "
#~ "</render/cycles/nodes/index>`; a graphical nodes "
#~ "editor is available."
#~ msgstr ""

#~ msgid ""
#~ "Last, you can directly set the "
#~ "color of object surfaces using various"
#~ " special effects. Strictly speaking, these"
#~ " are not materials at all, but "
#~ "they are included here because they "
#~ "affect the appearance of your objects."
#~ " These include :ref:`Vertex Painting "
#~ "<painting-vertex-index>`, :doc:`Volume Rendering"
#~ " </render/cycles/materials/volume>`, and :doc:`Wire "
#~ "Rendering </render/cycles/nodes/types/input/wireframe>`."
#~ msgstr ""

#~ msgid ""
#~ "In Blender, materials can (optionally) "
#~ "have associated textures. Textures *describe*"
#~ " the substance: e.g. *polished* brass, "
#~ "*dirty* glass or *embroidered* linen. "
#~ "The :doc:`Textures </render/shaders/textures/index>` "
#~ "chapter describes how to add textures"
#~ " to materials."
#~ msgstr ""

#~ msgid ""
#~ "Last, you can directly set the "
#~ "color of object surfaces using various"
#~ " special effects. Strictly speaking, these"
#~ " are not materials at all, but "
#~ "they are included here because they "
#~ "affect the appearance of your objects."
#~ " These include :ref:`Vertex Painting "
#~ "<painting-vertex-index>`, :doc:`Volume Rendering"
#~ " </render/engines/cycles/materials/volume>`, and "
#~ ":doc:`Wire Rendering "
#~ "</render/shaders/nodes/types/input/wireframe>`."
#~ msgstr ""

#~ msgid ""
#~ "First, you can set the :doc:`Settings"
#~ " </render/engines/cycles/materials/settings>` in the"
#~ " various Material panels."
#~ msgstr ""

#~ msgid ""
#~ "Last, you can directly set the "
#~ "color of object surfaces using various"
#~ " special effects. Strictly speaking, these"
#~ " are not materials at all, but "
#~ "they are included here because they "
#~ "affect the appearance of your objects."
#~ " These include :ref:`Vertex Painting "
#~ "<painting-vertex-index>`, :doc:`Volume Rendering"
#~ " </render/engines/cycles/materials/volume>`, and "
#~ ":doc:`Wire Rendering "
#~ "</render/shader_nodes/input/wireframe>`."
#~ msgstr ""

#~ msgid ""
#~ "First, you can set the :doc:`Settings"
#~ " </render/cycles/material_settings>` in the "
#~ "various Material panels."
#~ msgstr ""

#~ msgid ""
#~ "Second, you can use :doc:`Nodes "
#~ "</render/shaders/nodes/index>`; a graphical nodes"
#~ " editor is available."
#~ msgstr ""

#~ msgid "Surface Shader"
#~ msgstr "Шейдер поверхности"

#~ msgid ""
#~ "The :doc:`surface shader "
#~ "</render/materials/components/surface>` defines the "
#~ "light interaction at the surface of "
#~ "the mesh."
#~ msgstr ""
#~ "Шейдер поверхности определяет взаимодействие "
#~ "света с поверхностью полисетки."

#~ msgid "Volume Shader"
#~ msgstr "Шейдер объёма"

#~ msgid ""
#~ "When the surface shader does not "
#~ "reflect or absorb light, it enters "
#~ "into the volume. If no :doc:`volume "
#~ "shader </render/materials/components/volume>` is "
#~ "specified, it will pass straight through"
#~ " to the other side of the mesh."
#~ msgstr ""
#~ "Если шейдер поверхности не отражает и"
#~ " не поглощает свет, тот проникает в"
#~ " объём. Если шейдер объёма не "
#~ "определён, свет просто пройдёт сквозь "
#~ "объект и выйдет с другой стороны "
#~ "полисетки."

#~ msgid ""
#~ "If it is defined, a volume shader"
#~ " describes the light interaction as "
#~ "it passes through the volume of "
#~ "the mesh. Light may be scattered, "
#~ "absorbed, or emitted at any point "
#~ "in the volume."
#~ msgstr ""
#~ "Если же шейдер задан, он описывает "
#~ "взаимодействие со светом, когда тот "
#~ "проходит сквозь объём полисетки. Свет "
#~ "может быть рассеян, поглощён или испущен"
#~ " в любой точке объёма."

#~ msgid ""
#~ "A material may have both a surface"
#~ " and a volume shader, or only "
#~ "one of either. Using both may be"
#~ " useful for materials such as glass,"
#~ " water or ice, where you want "
#~ "some of the light to be absorbed"
#~ " as it passes through the surface,"
#~ " combined with e.g. a glass or "
#~ "glossy shader at the surface."
#~ msgstr ""
#~ "Материал может иметь как шейдер "
#~ "поверхности, так и шейдер объёма, либо"
#~ " только один из них. Одновременное "
#~ "использование шейдеров может быть полезно "
#~ "для таких материалов, как стекло, вода"
#~ " или лёд, когда вам нужно, чтобы "
#~ "часть света поглощалась при прохождении "
#~ "сквозь поверхность, а другая часть "
#~ "отражалась от поверхности шейдером стекла "
#~ "или глянца."

#~ msgid "Displacement"
#~ msgstr "Шейдер смещения"

#~ msgid ""
#~ "The shape of the surface and the"
#~ " volume inside it may be altered "
#~ "by :doc:`displacement "
#~ "</render/materials/components/displacement>`. This way,"
#~ " textures can then be used to "
#~ "make the mesh surface more detailed."
#~ msgstr ""
#~ "Форма поверхности и внутренний объём "
#~ "объекта могут быть изменены шейдерами "
#~ "смещения. Таким образом можно использовать "
#~ "текстуры, чтобы сделать поверхность полисетки"
#~ " более детализированной."

#~ msgid ""
#~ "Depending on the settings, the "
#~ "displacement may be virtual, only "
#~ "modifying the surface normals to give"
#~ " the impression of displacement, which "
#~ "is known as bump mapping, or a "
#~ "combination of real and virtual "
#~ "displacement."
#~ msgstr ""
#~ "В зависимости от настроек, смещение "
#~ "может быть виртуальным, то есть изменять"
#~ " только нормали поверхности, создавая "
#~ "видимость смещения (так же оно известно"
#~ " как рельефное текстурирование или bump "
#~ "mapping) или быть комбинацией реального "
#~ "и виртуального смещения."

#~ msgid "Energy Conservation"
#~ msgstr "Сохранение энергии"

#~ msgid ""
#~ "The material system is built with "
#~ "physically-based rendering in mind, cleanly"
#~ " separating how a material looks and"
#~ " which rendering algorithm is used to"
#~ " render it. This makes it easier "
#~ "to achieve realistic results and "
#~ "balanced lighting, though there are a"
#~ " few things to keep in mind."
#~ msgstr ""
#~ "Система материалов знает о том, что "
#~ "визуализация будет выполняться рендером, "
#~ "уважающем законы физики, чётко отделяя "
#~ "то, как материал выглядит от того, "
#~ "какие алгоритмы визуализации используются для"
#~ " его отрисовки. Это упрощает достижение "
#~ "реалистичных результатов и сбалансированного "
#~ "освещения, хотя и есть несколько вещей,"
#~ " о которых следует знать."

#~ msgid ""
#~ "In order for materials to work "
#~ "well with global illumination, they "
#~ "should be, speaking in terms of "
#~ "physics, energy conserving. That means "
#~ "they cannot reflect more light than "
#~ "comes in. This property is not "
#~ "strictly enforced, but if colors are "
#~ "in the range 0.0 to 1.0, and "
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)`\\ s are only mixed "
#~ "together with the Mix Shader node, "
#~ "this will automatically be true."
#~ msgstr ""
#~ "Для того, чтобы материалы корректно "
#~ "работали с глобальным освещением, они "
#~ "должны, говоря в терминах физики, "
#~ "сохранять энергию. Это значит, что они"
#~ " не должны отражать больше света, чем"
#~ " получают. Это свойство не всегда "
#~ "соблюдается, но если компоненты цвета "
#~ "будут в диапазоне от 0.0 до 1.0"
#~ " и цвета будут смешиваться с "
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function - функция двунаправленного "
#~ "поверхностного рассеивания отражения)` только "
#~ "в узле «Смешать шейдеры», оно будет "
#~ "выполнено автоматически."

#~ msgid ""
#~ "It is however, possible to break "
#~ "this, with color values higher than "
#~ "1.0 or using the Add Shader node,"
#~ " but one must be careful when "
#~ "doing this to keep materials behaving"
#~ " predictably under various lighting "
#~ "conditions. It can result in a "
#~ "reflection adding light into the system"
#~ " at each bounce, turning a "
#~ ":abbr:`BSDF (Bidirectional scattering distribution"
#~ " function)` into a kind of emitter."
#~ msgstr ""
#~ "Однако это правило можно нарушить, если"
#~ " значения компонент цветов будут больше "
#~ "1.0 или цвета будут объединяться через"
#~ " узел «Сложить шейдеры». Так следует "
#~ "делать с осторожностью, чтобы материалы "
#~ "вели себя предсказуемо при различных "
#~ "условиях освещения. Они могут начать "
#~ "бесконтрольно отражать свет, с каждым "
#~ "отскоком добавляя его в систему, "
#~ "превратив :abbr:`BSDF (Bidirectional scattering "
#~ "distribution function - функция "
#~ "двунаправленного поверхностного рассеивания "
#~ "отражения)` в своего рода источник "
#~ "света."

#~ msgid ""
#~ "A material defines the artistic "
#~ "qualities of the substance that an "
#~ "object is made of. In its simplest"
#~ " form, you can use materials to "
#~ "show the substance an object is "
#~ "made of, or to \"paint\" the "
#~ "object with different colors. Usually, "
#~ "the substance is represented by its "
#~ "surface qualities (color, shininess, "
#~ "reflectance, etc.) but it can also "
#~ "exhibit more complicated effects such as"
#~ " transparency, diffraction and subsurface "
#~ "scattering. Typical materials might be "
#~ "brass, skin, glass, or linen."
#~ msgstr ""

#~ msgid ""
#~ "Materials can also contain displacement "
#~ "information to described how the "
#~ "material raises and lowers the surface"
#~ " of the material."
#~ msgstr ""

#~ msgid ""
#~ "Various basic materials (single, multiple "
#~ "material, transparency, vertex paint)."
#~ msgstr ""

#~ msgid ""
#~ "The basic (un-textured) Blender material"
#~ " is uniform across each face of "
#~ "an object (although the various pixels"
#~ " of each face of the object may"
#~ " appear differently because of lighting "
#~ "effects). However, different faces of "
#~ "the object may use different materials"
#~ " (see :ref:`bi-multiple-materials`)."
#~ msgstr ""

#~ msgid ""
#~ "In Blender, materials can (optionally) "
#~ "have associated textures. Textures *describe*"
#~ " the substance: e.g. *polished* brass, "
#~ "*dirty* glass or *embroidered* linen. "
#~ "The :doc:`Textures "
#~ "</render/materials/legacy_textures/index>` chapter "
#~ "describes how to add textures to "
#~ "materials."
#~ msgstr ""

#~ msgid "How Materials Work"
#~ msgstr ""

#~ msgid ""
#~ "Before you can understand how to "
#~ "design effectively with materials, you "
#~ "must understand how simulated light and"
#~ " surfaces interact in Blender's rendering"
#~ " engine and how material settings "
#~ "control those interactions. A deep "
#~ "understanding of the engine will help"
#~ " you to get the most from it."
#~ msgstr ""

#~ msgid ""
#~ "The rendered image you create with "
#~ "Blender is a projection of the "
#~ "scene onto an imaginary surface called"
#~ " the *viewing plane*. The viewing "
#~ "plane is analogous to the film in"
#~ " a traditional camera, or the rods"
#~ " and cones in the human eye, "
#~ "except that it receives simulated light,"
#~ " not real light."
#~ msgstr ""

#~ msgid ""
#~ "To render an image of a scene "
#~ "we must first determine what light "
#~ "from the scene is arriving at each"
#~ " point on the viewing plane. The "
#~ "best way to answer this question "
#~ "is to follow a straight line (the"
#~ " simulated light ray) backwards through "
#~ "that point on the viewing plane "
#~ "and the focal point (the location "
#~ "of the camera) until it hits a "
#~ "renderable surface in the scene, at "
#~ "which point we can determine what "
#~ "light would strike that point."
#~ msgstr ""

#~ msgid ""
#~ "The surface properties and incident "
#~ "light angle tells how much of that"
#~ " light would be reflected back along"
#~ " the incident viewing angle *(Rendering "
#~ "engine basic principle)*."
#~ msgstr ""

#~ msgid "Rendering engine basic principle."
#~ msgstr ""

#~ msgid ""
#~ "Two basic types of phenomena take "
#~ "place at any point on a surface"
#~ " when a light ray strikes it: "
#~ "diffusion and specular reflection. Diffusion"
#~ " and specular reflection are distinguished"
#~ " from each other mainly by the "
#~ "relationship between the incident light "
#~ "angle and the reflected light angle."
#~ msgstr ""

#~ msgid ""
#~ "The shading (or coloring) of the "
#~ "object during render will then take "
#~ "into account the base color (as "
#~ "modified by the diffusion and specular"
#~ " reflection phenomenon) and the light "
#~ "intensity."
#~ msgstr ""

#~ msgid ""
#~ "Using the internal ray tracer, other "
#~ "(more advanced) phenomena could occur. "
#~ "In ray-traced reflections, the point "
#~ "of a surface struck by a light "
#~ "ray will return the color of its"
#~ " surrounding environment, according to the"
#~ " rate of reflection of the material"
#~ " (mixing the base color and the "
#~ "surrounding environment's) and the viewing "
#~ "angle."
#~ msgstr ""

#~ msgid ""
#~ "On the other hand, in ray-traced"
#~ " refractions, the point of a surface"
#~ " struck by a light ray will "
#~ "return the color of its background "
#~ "environment, according to the rate of"
#~ " transparency (mixing the base color "
#~ "and the background environment's along "
#~ "with its optional filtering value) of"
#~ " the material and the optional index"
#~ " of refraction of the material, which"
#~ " will distort the viewing angle."
#~ msgstr ""

#~ msgid ""
#~ "Of course, shading of the object "
#~ "hit by a light ray will be "
#~ "about mixing all these phenomena at "
#~ "the same time during the rendering. "
#~ "The appearance of the object, when "
#~ "rendered, depends on many interrelated "
#~ "settings:"
#~ msgstr ""

#~ msgid "World (Ambient color, Radiosity, Ambient Occlusion)"
#~ msgstr ""

#~ msgid "Lights"
#~ msgstr ""

#~ msgid ""
#~ "Material settings (including ambient, "
#~ "emission, and every other setting on "
#~ "every panel in that tab)"
#~ msgstr ""

#~ msgid "Texture(s) and how they are mixed"
#~ msgstr ""

#~ msgid "Material Nodes"
#~ msgstr ""

#~ msgid "Camera"
#~ msgstr ""

#~ msgid "Viewing angle"
#~ msgstr ""

#~ msgid "Obstructions and transparent occlusions"
#~ msgstr ""

#~ msgid "Shadows from other opaque/transparent objects"
#~ msgstr ""

#~ msgid "Render settings"
#~ msgstr ""

#~ msgid "Object dimensions (SS settings are relevant to dimensions)"
#~ msgstr ""

#~ msgid "Object shape (refractions, Fresnel effects)"
#~ msgstr ""

#~ msgid "Using Materials"
#~ msgstr ""

#~ msgid "Check your Render"
#~ msgstr ""

#~ msgid ""
#~ "When designing materials (and textures "
#~ "and lighting), frequently check the "
#~ "rendered appearance of your scene, using"
#~ " your chosen render engine/shader settings."
#~ " The appearance might be quite "
#~ "different from that shown in the "
#~ "texture display in the 3D panel."
#~ msgstr ""

#~ msgid ""
#~ "As stated above, the material settings"
#~ " usually determine the surface properties"
#~ " of the object. There are several "
#~ "ways in which materials can be set"
#~ " up in Blender. Generally speaking, "
#~ "these are not compatible. You must "
#~ "choose which method you are going "
#~ "to use for each particular object "
#~ "in your scene:"
#~ msgstr ""

#~ msgid ""
#~ "First, you can set the :doc:`Settings"
#~ " </render/materials/settings>` in the various "
#~ "Material panels."
#~ msgstr ""

#~ msgid ""
#~ "Second, you can use :doc:`Nodes "
#~ "</render/shader_nodes/index>`; a graphical nodes "
#~ "editor is available."
#~ msgstr ""

#~ msgid ""
#~ "Last, you can directly set the "
#~ "color of object surfaces using various"
#~ " special effects. Strictly speaking, these"
#~ " are not materials at all, but "
#~ "they are included here because they "
#~ "affect the appearance of your objects."
#~ " These include :ref:`Vertex Painting "
#~ "<painting-vertex-index>`, :doc:`Volume Rendering"
#~ " </render/materials/components/volume>`, and :doc:`Wire"
#~ " Rendering </render/shader_nodes/input/wireframe>`."
#~ msgstr ""

#~ msgid ""
#~ "The exact effect of Material settings"
#~ " can be affected by a number of"
#~ " system settings. First and foremost "
#~ "is the renderer used: Cycles and "
#~ "the Blender Renderer (aka Blender "
#~ "Internal or BI) require quite different"
#~ " illumination levels to achieve similar "
#~ "results, and even then the appearance"
#~ " of objects can be quite different."
#~ " Also, the material properties settings "
#~ "can be affected by the texture "
#~ "method used (single-texture, multi-"
#~ "texture or GLSL). So it is "
#~ "recommended to always select the "
#~ "appropriate system settings before starting"
#~ " the design of materials."
#~ msgstr ""

