# Этот файл является частью перевода руководства к Blender'у.
# Соответствующая страница руководства может быть получена по адресу
# https://www.blender.org/manual/ru/pipeline/index.html
#
# Этот файл распространяется под всемирной лицензией CC-BY-SA 4.0
# https://creativecommons.org/licenses/by-sa/4.0/deed.ru
msgid ""
msgstr ""
"Project-Id-Version: Руководство по Blender 2.78\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-02-13 22:19-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../manual/pipeline/index.rst:5
msgid "Pipeline"
msgstr ""

#: ../../manual/pipeline/index.rst:7
msgid ""
"This section of the manual focuses on the integration of Blender into a "
"production pipeline. This is a vast topic that covers many areas of the "
"software, but here we will focus on file/asset management and data I/O."
msgstr ""

#: ../../manual/pipeline/index.rst:13
msgid ""
"The tools and workflows documented here require familiarity with working "
"with a command line interface and are mostly aimed at TDs and technical "
"users."
msgstr ""

#: ../../manual/pipeline/index.rst:17
msgid "BAM Asset Manager"
msgstr ""

#: ../../manual/pipeline/index.rst:19
msgid ""
"Refactoring linked .blend files is a common practice in a production "
"environment. While some basic operations can be accomplished within "
"Blender, sometimes it is more practical to perform them on the command "
"line or via a script. During the production of Cosmos Laundromat "
"(Gooseberry Open Movie Project) the *BAM Asset Manager* (BAM) was "
"developed. The original scope of BAM included client-server asset "
"management tools going beyond Blender, but it was later refocused on core"
" utilities to perform two operations:"
msgstr ""

#: ../../manual/pipeline/index.rst:27
msgid "blendfile packing"
msgstr ""

#: ../../manual/pipeline/index.rst:28
msgid "automatic dependencies remapping"
msgstr ""

#: ../../manual/pipeline/index.rst:30
msgid "The following section of the manual focuses on how to use BAM."
msgstr ""

#: ../../manual/pipeline/index.rst:33
msgid "Installing BAM"
msgstr ""

#: ../../manual/pipeline/index.rst:34
msgid ""
"BAM is a standalone Python package, that can be run on any system without"
" any particular configuration. The only requirement is Python 3 (and pip,"
" the Python package manager, to easily install BAM)."
msgstr ""

#: ../../manual/pipeline/index.rst:37
msgid ""
"Windows, Linux and macOS provide different ways to install Python 3 and "
"pip. Check out the online docs to learn more about a specific platform."
msgstr ""

#: ../../manual/pipeline/index.rst:40
msgid ""
"Once Python 3 and pip are available, BAM can be installed via command "
"line by typing:"
msgstr ""

#: ../../manual/pipeline/index.rst:46
msgid ""
"After a successful installation, the `bam` command will be available. By "
"typing it and pressing the Enter key, all the available subcommands will "
"be displayed."
msgstr ""

#: ../../manual/pipeline/index.rst:51
msgid "bam pack"
msgstr ""

#: ../../manual/pipeline/index.rst:53
msgid ""
"This command is used for packing a ``.blend`` file and *all* its "
"dependencies into a ``.zip`` file for redistribution."
msgstr ""

#: ../../manual/pipeline/index.rst:61
msgid ""
"You can simply pack a blend file like this to create a zip-file of the "
"same name."
msgstr ""

#: ../../manual/pipeline/index.rst:67
msgid ""
"You may also want to give an explicit output directory. The example shows"
" how to pack a blend with maximum compression for online downloads"
msgstr ""

#: ../../manual/pipeline/index.rst:74
msgid ""
"The command provides several options to adapt to different workflows "
"(final distribution, partial extraction, rendering)."
msgstr ""

#: ../../manual/pipeline/index.rst:77
msgid "``-o``, ``--output`` ``<FILE>``"
msgstr ""

#: ../../manual/pipeline/index.rst:78
msgid "Output file or a directory when multiple inputs are passed."
msgstr ""

#: ../../manual/pipeline/index.rst:79
msgid "``-m``, ``--mode`` ``<MODE>``"
msgstr ""

#: ../../manual/pipeline/index.rst:80
msgid ""
"Output file or a directory when multiple inputs are passed. Possible "
"choices: ``ZIP``, ``FILE``."
msgstr ""

#: ../../manual/pipeline/index.rst:86
msgid "``-e``, ``--exclude`` ``<PATTERN(S)>``"
msgstr ""

#: ../../manual/pipeline/index.rst:82
msgid "Optionally exclude files from the pack."
msgstr ""

#: ../../manual/pipeline/index.rst:84
msgid "``--exclude=\"*.png\"``"
msgstr ""

#: ../../manual/pipeline/index.rst:85
msgid "Using Unix shell-style wildcards *(case insensitive)*."
msgstr ""

#: ../../manual/pipeline/index.rst:86
msgid "``--exclude=\"*.txt;*.avi;*.wav\"``"
msgstr ""

#: ../../manual/pipeline/index.rst:87
msgid "Multiple patterns can be passed using the ``;`` separator."
msgstr ""

#: ../../manual/pipeline/index.rst:88
msgid "``-a``, ``--all-deps``"
msgstr ""

#: ../../manual/pipeline/index.rst:89
msgid "Follow all dependencies (unused indirect dependencies too)."
msgstr ""

#: ../../manual/pipeline/index.rst:90
msgid "``-q``, ``--quiet``"
msgstr ""

#: ../../manual/pipeline/index.rst:91
msgid "Suppress status output."
msgstr ""

#: ../../manual/pipeline/index.rst:93
msgid "``-c``, ``--compress`` ``<LEVEL>``"
msgstr ""

#: ../../manual/pipeline/index.rst:93
msgid ""
"Compression level for resulting archive. Possible choices: ``default``, "
"``fast``, ``best``, ``store``."
msgstr ""

#: ../../manual/pipeline/index.rst:96
msgid "``--repo`` ``<DIR PATH>``"
msgstr ""

#: ../../manual/pipeline/index.rst:96
msgid ""
"Specify a \"root\" path from where to pack the selected file. This allows"
" for the creation of a sparse copy of the production tree, without any "
"remapping."
msgstr ""

#: ../../manual/pipeline/index.rst:100
msgid "``--warn-external``"
msgstr ""

#: ../../manual/pipeline/index.rst:99
msgid "Report external libraries errors (missing paths)."
msgstr ""

#: ../../manual/pipeline/index.rst:103
msgid "Examples"
msgstr ""

#: ../../manual/pipeline/index.rst:105
msgid ""
"Consider the following directory layout, and in particular the file "
"*01_01_A.lighting.blend* with its linked libraries."
msgstr ""

#: ../../manual/pipeline/index.rst:122
msgid ""
"Once we run ``bam pack /scenes/01-opening/01_01_A.lighting.blend`` we "
"obtain a *01_01_A.lighting.zip* inside of which we find the following "
"structure."
msgstr ""

#: ../../manual/pipeline/index.rst:137
msgid ""
"Note how all paths have been remapped relative to the placement of "
"*01_01_A.lighting.blend* in the root of the output. If we run ``bam pack "
"/scenes/01-opening/01_01_A.lighting.blend --repo ~/agent327``, the output"
" will be different."
msgstr ""

#: ../../manual/pipeline/index.rst:154
msgid ""
"In this case no path is remapped, and we simply strip out any file that "
"is not referenced as a direct or indirect dependency of "
"*01_01_A.lighting.blend*. This is effectively a sparse copy of the "
"original production tree."
msgstr ""

#: ../../manual/pipeline/index.rst:160
msgid "bam remap"
msgstr ""

#: ../../manual/pipeline/index.rst:162
msgid "Remap blend file paths"
msgstr ""

#: ../../manual/pipeline/index.rst:168
msgid "This command is a 3 step process:"
msgstr ""

#: ../../manual/pipeline/index.rst:170
msgid ""
"first run ``bam remap start .`` which stores the current state of your "
"project (recursively)."
msgstr ""

#: ../../manual/pipeline/index.rst:171
msgid "then re-arrange the files on the filesystem (rename, relocate)."
msgstr ""

#: ../../manual/pipeline/index.rst:172
msgid ""
"finally run ``bam remap finish`` to apply the changes, updating the "
"``.blend`` files internal paths."
msgstr ""

#: ../../manual/pipeline/index.rst:186
msgid ""
"Remapping creates a file called ``bam_remap.data`` in the current "
"directory. You can relocate the entire project to a new location but on "
"executing ``finish``, this file must be accessible from the current "
"directory."
msgstr ""

#: ../../manual/pipeline/index.rst:192
msgid ""
"This command depends on files unique contents, take care not to modify "
"the files once remap is started."
msgstr ""

#: ../../manual/pipeline/index.rst:197
msgid "Subcommands"
msgstr ""

#: ../../manual/pipeline/index.rst:200
msgid "remap start"
msgstr ""

#: ../../manual/pipeline/index.rst:202
msgid "Start remapping the blend files"
msgstr ""

#: ../../manual/pipeline/index.rst:211 ../../manual/pipeline/index.rst:228
#: ../../manual/pipeline/index.rst:241
msgid "``-j``, ``--json``"
msgstr ""

#: ../../manual/pipeline/index.rst:210 ../../manual/pipeline/index.rst:227
#: ../../manual/pipeline/index.rst:240
msgid "Generate JSON output"
msgstr ""

#: ../../manual/pipeline/index.rst:214
msgid "remap finish"
msgstr ""

#: ../../manual/pipeline/index.rst:216
msgid "Finish remapping the blend files"
msgstr ""

#: ../../manual/pipeline/index.rst:222
msgid "``-r``, ``--force-relative``"
msgstr ""

#: ../../manual/pipeline/index.rst:223
msgid "Make all remapped paths relative (even if they were originally absolute)"
msgstr ""

#: ../../manual/pipeline/index.rst:224
msgid "``-d``, ``--dry-run``"
msgstr ""

#: ../../manual/pipeline/index.rst:225
msgid "Just print output as if the paths are being run"
msgstr ""

#: ../../manual/pipeline/index.rst:231
msgid "remap reset"
msgstr ""

#: ../../manual/pipeline/index.rst:233
msgid "Cancel path remapping"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Output file or a directory when multiple inputs are passed"
#~ msgstr ""

#~ msgid ""
#~ "Output file or a directory when "
#~ "multiple inputs are passed. Possible "
#~ "choices: ``ZIP``, ``FILE``"
#~ msgstr ""

#~ msgid "Follow all dependencies (unused indirect dependencies too)"
#~ msgstr ""

#~ msgid "Suppress status output"
#~ msgstr ""

#~ msgid ""
#~ "Compression level for resulting archive "
#~ "Possible choices: ``default``, ``fast``, "
#~ "``best``, ``store``"
#~ msgstr ""

#~ msgid "Report external libraries errors (missing paths)"
#~ msgstr ""

