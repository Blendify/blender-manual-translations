#
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 2.76\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-02 14:45+0800\n"
"PO-Revision-Date: 2018-04-23 21:22+0800\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../manual/compositing/types/color/alpha_over.rst:5
msgid "Alpha Over Node"
msgstr "Alpha上叠节点"

#: ../../manual/compositing/types/color/alpha_over.rst:10
msgid "Alpha Over Node."
msgstr "Alpha上叠节点。"

#: ../../manual/compositing/types/color/alpha_over.rst:12
#, fuzzy
msgid "The *Alpha Over* node is used to layer images on top of one another."
msgstr "*Alpha上叠节点* 将一幅图像覆盖在另一幅图像之上。此节点不对图像的颜色进行处理。"

#: ../../manual/compositing/types/color/alpha_over.rst:14
#, fuzzy
msgid ""
"Where the foreground image pixels has an alpha greater than 0, the "
"background image will be overlaid."
msgstr "前景图像。当图像像素有一个大于0的alpha通道时，背景图像将被遮挡。"

#: ../../manual/compositing/types/color/alpha_over.rst:18
msgid "Inputs"
msgstr "输入"

#: ../../manual/compositing/types/color/alpha_over.rst:21
msgid "Factor"
msgstr "系数"

#: ../../manual/compositing/types/color/alpha_over.rst:21
msgid ""
"Controls the amount of foreground image. A factor less than 1 will make "
"the foreground more transparent."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:23
#: ../../manual/compositing/types/color/alpha_over.rst:27
#: ../../manual/compositing/types/color/alpha_over.rst:56
msgid "Image"
msgstr "图像"

#: ../../manual/compositing/types/color/alpha_over.rst:24
#, fuzzy
msgid "Input for the *background* image."
msgstr "背景图像。"

#: ../../manual/compositing/types/color/alpha_over.rst:26
msgid "Input for the *foreground* image."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:30
msgid "Properties"
msgstr "属性"

#: ../../manual/compositing/types/color/alpha_over.rst:39
msgid "Convert Premultiplied"
msgstr "转换叠加"

#: ../../manual/compositing/types/color/alpha_over.rst:33
msgid "Converts foreground image to *premultiplied alpha* format."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:35
msgid ""
"The *Alpha Over* node is designed to work with *premultiplied* alpha "
"color format. Use *Convert Premul* when you know that your image has "
"*straight* alpha color values, to perform the correct over operation. "
"Result will be still premultiplied alpha."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:39
#, fuzzy
msgid "See :term:`Alpha Channel`."
msgstr "混合系数。参看 :term:`Alpha Channel`。"

#: ../../manual/compositing/types/color/alpha_over.rst:49
msgid "Premultiply"
msgstr "预乘"

#: ../../manual/compositing/types/color/alpha_over.rst:42
msgid ""
"The *Premul* slider allows to mix between the using *premultiplied* or "
"*non premultiplied* alpha."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:44
msgid ""
"When set to 1, the foreground color values will be multiplied by alpha, "
"i.e. premultiplied. This is equivalent to enabling the *Convert Premul* "
"option. When it set to 0, color values does not change."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:48
msgid "If *Premultiply* is not zero, *Convert Premul* will be ignored."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:52
msgid "Outputs"
msgstr "输出"

#: ../../manual/compositing/types/color/alpha_over.rst:55
msgid "Standard image output."
msgstr "标准化图像输出。"

#: ../../manual/compositing/types/color/alpha_over.rst:59
msgid "Examples"
msgstr "范例"

#: ../../manual/compositing/types/color/alpha_over.rst:61
msgid ""
"In the map below, *Color Ramp* node is used to add an alpha channel to "
"the black-and-white swirl image. Then *Alpha Over* node is used to "
"overlay it on top of another image."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:67
msgid "Assembling a composite image using Alpha Over."
msgstr "使用Alpha上叠节点合成图像。"

#: ../../manual/compositing/types/color/alpha_over.rst:69
msgid ""
"In next example, we use the *Factor* control to make a \"Fade In\" "
"effect. This effect can be animated by adding a *Time* node to feed the "
"*Factor* socket as shown below. In this example, over the course of 30 "
"frames, the *Time* node makes the *Alpha Over* node produce a picture "
"that starts with the pure background image, and title slowly bleeds "
"through the background."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:77
msgid "Animated fade in effect using Alpha Over."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:79
msgid ""
"Note the *Convert Premul* checkbox is enabled, since as the foreground "
"used a PNG image that has *straight* alpha."
msgstr ""

#~ msgid "Controls the amount of influence the node exerts on the output image."
#~ msgstr "控制此节点在输出图像上的作用效果程度。"

#~ msgid "`Strange Halos or Outlines`_."
#~ msgstr "`奇特的光环或轮廓`_。"

#~ msgid "Strange Halos or Outlines"
#~ msgstr "奇特的光环或轮廓"

#~ msgid ""
#~ "This section clarifies the functionality "
#~ "of the premultiplied alpha button. An"
#~ " alpha channel has a value of "
#~ "between 0 and 1. To make an "
#~ "image transparent (to composite it over"
#~ " another one), the RGB pixel values"
#~ " are multiplied by the alpha values"
#~ " (making the image transparent (0) "
#~ "where the alpha is black (0), and"
#~ " opaque (1) where it is white "
#~ "(1))."
#~ msgstr "这部分介绍预乘alpha参数的功能。一个alpha通道的取值范围在0和1之间。若要使一幅图像透明（合成中置于另一幅图像之上），RGB像素值将和alpha值（图像透明的部分alpha值为0，呈黑色显示，不透明的部分alpha值为1，呈白色显示）进行相乘操作。"

#~ msgid ""
#~ "To composite image A over image B,"
#~ " the alpha of image A gets "
#~ "multiplied by image A, thus making "
#~ "the image part of A opaque and "
#~ "the rest transparent. Then the alpha "
#~ "channel of A is inverted and "
#~ "multiplied by image B, thus making "
#~ "image B transparent, where A is "
#~ "opaque and vice versa. To get the"
#~ " final composite the resultant images "
#~ "are added."
#~ msgstr "合成中，图像A覆盖在图像B之上，图像A的alpha和图像A颜色值相乘，使得图像A除了不透明部分其余变得透明。图像A的alpha反转继续和图像B相乘，结果使得图像B变为透明，图像A是不透明的，反之亦然。然后将最终两者的合成结果进行相加操作。"

#~ msgid ""
#~ "A premultiplied alpha is, when the "
#~ "image (RGB) pixels are already "
#~ "multiplied by the alpha channel, "
#~ "therefore, the above compositing operation "
#~ "does not work too well, and "
#~ "*Convert Premultiplied* has to be "
#~ "enabled. This is only an issue in"
#~ " semitransparent area and edges usually."
#~ " The issue normally occurs in a "
#~ "node setup, in which two images "
#~ "previously combined with alpha, then are"
#~ " combined again with yet another "
#~ "image. The previously combined image was"
#~ " already multiplied (premultiplied) and "
#~ "needs to be converted as such "
#~ "(hence, *Convert PreMul*)."
#~ msgstr ""
#~ "预乘alpha的含义是，图像（RGB）像素已经和图像的alpha通道数据进行相乘操作，因此，以上的图像合成操作结果可能不会很好，*转换叠加*"
#~ " "
#~ "处于被启用状态。通常会在图像的边界或半透明区域出现一些小问题。往往这种情况是在节点流程装配的时候出现的比较多，先前的两幅图像的alpha已经合并了，现在又进行了二次合并。先前的图像已经进行了预乘操作，需要进行转化才会使结果正确（这就是*转换叠加*"
#~ " 复选框的意义）。"

#~ msgid ""
#~ "If multiplied twice artifacts like a "
#~ "white or clear halo occur around "
#~ "where the image meet, since the "
#~ "alpha value is being squared or "
#~ "cubed. It also depends on whether "
#~ "or not the image has been rendered"
#~ " as a premultiplied, or as a "
#~ "straight RGBA image."
#~ msgstr "执行两次预乘的图像结果边缘看起来像是一个白色或者是清晰的光环的样子，因为alpha值被进行平方或立方运算。这取决于图像是否作为预乘进行了渲染，还是直接使用了RGBA图像。"

#~ msgid ""
#~ "In this example, an image of a "
#~ "Cube is superimposed on a cliff "
#~ "background. Use the PreMultiply button, "
#~ "when the foreground image and background"
#~ " images have a combined Alpha that"
#~ " is greater than 1.00; otherwise, you"
#~ " will see an unwanted halo effect."
#~ " The resulting image is a composite"
#~ " of the two source images."
#~ msgstr "此范例中，一个立方体图像叠放在悬崖边的背景上。当前景图像和背景图像合并alpha时结果大于1.00时，要使用预乘参数；否则，你将看到一个非预期的光环效果。结果图像是对两幅图像进行合成后的样子。"

#~ msgid "Animated see-through/sheer SFX using Alpha Over on frame 11."
#~ msgstr "使用Alpha上叠节点在第11帧实现 穿透/透明 动画特效。"

#~ msgid ""
#~ "In this example, we use the Factor"
#~ " control to make a sheer cloth "
#~ "or onion-skin effect. This effect "
#~ "can be animated, allowing the observer"
#~ " to \"see-through\" walls (or any "
#~ "foreground object) by hooking up a "
#~ "Time node to feed the Factor "
#~ "socket as shown below. In this "
#~ "example, over the course of 30 "
#~ "frames, the Time node makes the "
#~ "Alpha Over node produce a picture "
#~ "that starts with the background cliff"
#~ " image, and slowly bleeds through the"
#~ " cube. This example shows frame 11"
#~ " just as the cube starts to be"
#~ " revealed."
#~ msgstr "此范例中，我们使用系数控制实现透明衣服或者是洋葱皮特效。此效果可用于动画，通过连接“时间节点”到Alpha上叠节点的“系数”连接端口上，让观察者“穿透”墙面（或者任何前景物体）。在此范例中，整个过程是30帧，时间节点在一开始随着背景悬崖图像给Alpha上叠节点产生一幅图像，慢慢的穿透立方体。此范例显示在第11帧，立方体开始显现。"

