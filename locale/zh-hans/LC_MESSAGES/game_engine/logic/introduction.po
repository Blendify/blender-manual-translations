#
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 2.76\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-20 11:33+1100\n"
"PO-Revision-Date: 2018-03-28 17:24+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.0.6\n"

#: ../../manual/game_engine/logic/introduction.rst:4
msgid "Introduction"
msgstr "简介"

#: ../../manual/game_engine/logic/introduction.rst:6
msgid ""
"*Game Logic* is the default scripting layer in the Game Engine. Each "
"*Game Object* in the game may store a collection of logical components "
"(Logic Bricks) which control its behavior within the scene. Logic bricks "
"can be combined to perform user-defined actions that determine the "
"progression of the simulation."
msgstr ""
"*游戏逻辑* 是游戏引擎中默认的脚本层。游戏中的每个 *游戏对象* 可以存储一组"
"逻辑组件（逻辑块），用于控制其在场景中的行为。逻辑块可以组合执行用户定义"
"的操作，这些操作决定了模拟的进展。"

#: ../../manual/game_engine/logic/introduction.rst:13
msgid "Logic Bricks"
msgstr "逻辑块"

# 注：Blender 用户界面将 Actuators 翻译为促动器。网络搜索也有致动器、执行器、激励器、制动器的意思。
#: ../../manual/game_engine/logic/introduction.rst:15
msgid ""
"The main part of game logic can be set up through a graphical interface "
"the :doc:`Logic Editor </editors/logic_editor>`, and therefore does not "
"require detailed programming knowledge. Logic is set up as blocks (or "
"\"bricks\") which represent preprogrammed functions; these can be "
"tweaked and combined to create the game/application. There are three "
"types of logic brick: :doc:`Sensors </game_engine/logic/sensors/"
"introduction>`, :doc:`Controllers </game_engine/logic/controllers/"
"introduction>` and :doc:`Actuators </game_engine/logic/actuators/"
"introduction>`. Sensors are primitive event listeners, which are "
"triggered by specific events, such as a collision, a key press or mouse "
"movement. Controllers carry out logic operations on sensor output, and "
"trigger connected actuators when their operating conditions are met. "
"Actuators interact with the simulation directly, and are the only "
"components in the game which are able to do so (other than the Python "
"controller, and other simulation components such as Physics)."
msgstr ""
"游戏逻辑的主要部分可以通过 :doc:`逻辑编辑器 </editors/logic_editor>` 的图"
"形界面进行设置，因此不需要详细的编程知识。逻辑被设置为块（或“砖块”)，它们"
"表示预先编程的功能，这些功能可稍作调整并加以组合即可创建游戏/应用程序。逻"
"辑块有三种类型：:doc:`传感器 </game_engine/logic/sensors/"
"introduction>` ，:doc:`控制器 </game_engine/logic/controllers/"
"introduction>` 和 :doc:`执行器（Actuators）</game_engine/logic/actuators/"
"introduction>` 。传感器是原始事件监听器，它是由特定事件（如碰撞，按键或鼠"
"标移动）所触发。控制器对传感器输出进行逻辑操作，并在满足其操作条件时触发"
"连接的执行器。执行器直接与仿真进行交互，并且是游戏中唯一能够这样做的组件"
"（除了 Python 控制器和其他仿真组件，如物理）。"

#: ../../manual/game_engine/logic/introduction.rst:30
msgid "Properties"
msgstr "属性"

#: ../../manual/game_engine/logic/introduction.rst:32
msgid ""
":doc:`Properties </game_engine/logic/properties>` are like variables in "
"other programming languages. They are used to save and access data "
"values either for the whole game (e.g. scores), or for particular "
"objects/players (e.g. names). However, in the Blender Game Engine, a "
"property is associated with an object. Properties can be of different "
"types, and are set up in a special area of the :doc:`Logic Editor </"
"editors/logic_editor>`."
msgstr ""
":doc:`属性 </game_engine/logic/properties>` 与其他编程语言中的变量类似。"
"它们用于保存和访问整个游戏（例如：分数）或特定对象/玩家（例如：姓名）的数"
"据值。但是，在 Blender 游戏引擎中，属性与对象是相关联的。属性可以是不同的"
"类型，并且可以在 :doc:`逻辑编辑器 </editors/logic_editor>` 的特殊区域中设"
"置。"

#: ../../manual/game_engine/logic/introduction.rst:41
msgid "States"
msgstr "状态"

#: ../../manual/game_engine/logic/introduction.rst:43
msgid ""
"Another useful feature is object :doc:`States </game_engine/logic/"
"states>`. At any time while the simulation is running, the object will "
"process any logic which belongs to the current state of the object. "
"States can be used to define groups of behavior -- e.g. an actor object "
"may be \"sleeping\", \"awake\" or \"dead\", and its logic behavior may "
"be different in each of these three states. The states of an object are "
"set up, displayed and edited in the Controller logic bricks for the "
"object."
msgstr ""
"另一个有用的功能是对象 :doc:`状态 </game_engine/logic/states>` 。在模拟运"
"行期间，对象将处理属于对象当前状态的任何逻辑。状态可被用来定义组的行为——"
"例如：角色对象可能是“休眠”，“唤醒”或“死亡”，而在这三种状态中，其逻辑行为"
"可能是不同的。对象的状态可在对象的控制器逻辑块中设置、显示和编辑。"
