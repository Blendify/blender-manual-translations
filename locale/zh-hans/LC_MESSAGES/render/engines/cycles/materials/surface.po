#
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-17 01:30+0200\n"
"PO-Revision-Date: 2018-04-30 21:46+0800\n"
"Last-Translator: \n"
"Language: zh\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"X-Generator: Poedit 2.0.7\n"

#: ../../manual/render/cycles/materials/surface.rst:4
msgid "Surfaces"
msgstr "表面"

#: ../../manual/render/cycles/materials/surface.rst:6
msgid ""
"The surface shader defines the light interaction at the surface of the mesh. "
"One or more :abbr:`BSDF (Bidirectional scattering distribution function)`\\ 's "
"specify if incoming light is reflected back, refracted into the mesh, or "
"absorbed."
msgstr ""
"表面着色器定义了光线对网格外表面作用的结果。需由一个或多个 :abbr:`BSDF（双向散射"
"分布函数）`\\ 指定入射光是否被反射、折射或是吸收。"

#: ../../manual/render/cycles/materials/surface.rst:10
msgid ""
"Emission defines how light is emitted from the surface, allowing any surface to "
"become a light source."
msgstr "自发光定义了光线从表面发射的方式，可以让任意表面变成光源。"

#: ../../manual/render/cycles/materials/surface.rst:15
msgid "Terminology"
msgstr "术语解释"

#: ../../manual/render/cycles/materials/surface.rst:18
msgid "BSDF"
msgstr "双向散射分布函数"

#: ../../manual/render/cycles/materials/surface.rst:18
msgid ""
"Stands for Bidirectional Scattering Distribution Function. It defines how light "
"is reflected and refracted at a surface."
msgstr "它定义了光线经过物体表面时的反射与折射方式。"

#: ../../manual/render/cycles/materials/surface.rst:20
msgid "Reflection"
msgstr "反射"

#: ../../manual/render/cycles/materials/surface.rst:21
msgid "BSDFs reflect an incoming ray on the same side of the surface."
msgstr "BSDFs在表面的同一侧射入光线。"

#: ../../manual/render/cycles/materials/surface.rst:22
msgid "Transmission"
msgstr "发射"

#: ../../manual/render/cycles/materials/surface.rst:23
msgid ""
"BSDFs transmit an incoming ray through the surface, leaving on the other side."
msgstr "BSDFs通过表面发射射入光线，并留在另一侧。"

#: ../../manual/render/cycles/materials/surface.rst:27
msgid "Refraction"
msgstr "折射"

#: ../../manual/render/cycles/materials/surface.rst:25
msgid ""
"BSDFs are a type of *Transmission*, transmitting an incoming ray and changing "
"its direction as it exits on the other side of the surface."
msgstr "BSDFs是一种 *透射型* ，透射射入光线并在其离开表面另一侧时改变其方向。"

#: ../../manual/render/cycles/materials/surface.rst:30
msgid "BSDF Parameters"
msgstr "BSDF参数"

#: ../../manual/render/cycles/materials/surface.rst:32
msgid ""
"A major difference from non-physically-based renderers is that direct light "
"reflection from lamps and indirect light reflection of other surfaces are not "
"decoupled, but rather handled using a single :abbr:`BSDF (Bidirectional "
"scattering distribution function)`. This limits the possibilities a bit, but we "
"believe overall it is helpful in creating consistent-looking renders with fewer "
"parameters to tune."
msgstr ""
"与非物理渲染引擎的显著区别在于：来自光源的直接反射，和来自其它表面的间接反射，两"
"者相互影响，因为使用了单一的 :abbr:`BSDF (双向散射分布函数)` 。诚然，这对制作效"
"果的可能性有所牵制，但我们相信总体上它有助于用较少的参数来创建一致的外观。"

#: ../../<generated>:1
msgid "Roughness"
msgstr "粗糙度"

#: ../../manual/render/cycles/materials/surface.rst:39
msgid ""
"For the glossy :abbr:`BSDF (Bidirectional scattering distribution function)`\\ "
"s, the *roughness* parameter controls the sharpness of the reflection, from 0.0 "
"(perfectly sharp) to 1.0 (very soft). Compared to *hardness* or *exponent* "
"parameters, it has the advantage of being in the range 0.0 to 1.0, and as a "
"result gives more linear control and is more easily textureable. The relation "
"is roughly: *roughness* = 1 - 1/*hardness*"
msgstr ""
"相对于 :abbr:`BSDF (双向散射分布函数)` 的光滑度来说，*roughness（粗糙度）* 参数"
"控制着反射的锐度，从0.0的（非常锋利）到1.0（非常柔和）的反射效果。与 "
"*hardness（硬度）* 或 *exponent（指数）* 参数相比，它的优势在于能够在0.0到1.0之"
"间取值，进而获得更多的线性控制以及更方便的纹理处理方式，它们的关系大致是这样的："
"粗糙度 = 1 - 1/ *硬度*"

#: ../../manual/render/cycles/materials/surface.rst:48
msgid ""
"Currently Blender is coded to use an unsquared model. So if you are using a :"
"term:`Roughness Map` chances are that the result will not be accurate. To fix "
"this, you can square the texture by connecting the texture to a :doc:`Math node "
"</render/cycles/nodes/types/converter/math>` and either setting it to "
"*Multiply* and inputing the texture in both input sockets, or using the *Power* "
"function and setting the second input to 2."
msgstr ""
"如今Blender 是使用非矩形模型进行编译的。因此如果你使用了一个 :term:`糙度贴图` ，"
"很可能会导致结果不精确。为了解决这个问题，你可以通过与 :doc:`运算节点 </render/"
"cycles/nodes/types/converter/math>` 相连接将纹理方形化，将它设置为 *正片叠底* ，"
"然后将纹理输入两个输入接口；又或者使用 *Power* 函数来设置第二个接入口为2，两种方"
"式都可行。"
