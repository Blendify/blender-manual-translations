# SOME DESCRIPTIVE TITLE.
# Copyright (C) : This page is public domain as CC0
# This file is distributed under the same license as the Blender 2.77 Manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender 2.77 Manual 2.77\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-29 15:07-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../manual/rigging/armatures/structure.rst:4
msgid "Armature Structure"
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:9
msgid "Example of a very basic armature."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:11
msgid ""
"Armatures mimic real skeletons. They are made out of bones, which are (by"
" default) rigid elements. But you have more possibilities than with real "
"skeletons: In addition to the \"natural\" rotation of bones, you can also"
" translate and even scale them! And your bones do not have to be "
"connected to each other; they can be completely free if you want. "
"However, the most natural and useful setups imply that some bones are "
"related to others, forming so-called \"chains of bones\", which create "
"some sort of \"limbs\" in your armature, as detailed in `Chains of "
"Bones`_."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:26
msgid "Chains of Bones"
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:31
msgid "An armature with two chains of bones."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:34
msgid ""
"The bones inside an armature can be completely independent from each "
"other (i.e. the modification of one bone does not affect the others). But"
" this is not often a useful set up: To create a leg, all bones \"after\" "
"the thigh bone should move \"with\" it in a well-coordinated manner. This"
" is exactly what happens in armatures - by parenting a bone to the next "
"one in the limb, you create a \"chains of bones\". These chains can be "
"ramified. For example, five fingers attached to a single \"hand\" bone."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:42
msgid ""
"Bones are chained by linking the tip of the parent to the root of the "
"child. Root and tip can be *connected*, i.e. they are always exactly at "
"the same point; or they can be *free*, like in a standard parent-child "
"object relationship."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:46
msgid ""
"A given bone can be the parent of several children, and hence be part of "
"several chains at the same time."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:49
msgid ""
"The bone at the beginning of a chain is called its *root bone*, and the "
"last bone of a chain is the *tip bone* (do not confuse them with similar "
"names of bones' ends!)."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:53
msgid ""
"Chains of bones are a particularly important topic in :doc:`posing "
"</rigging/posing/index>` (especially with the standard *forward "
"kinematics* versus \"automatic\" *inverse kinematics* posing techniques)."
" You create/edit them in *Edit Mode*, but except in case of connected "
"bones, their relationships have no effect on bone transformations in this"
" mode (i.e. transforming a parent bone will not affect its children)."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:61
msgid "Editing Bones Relationships"
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:63
msgid ""
"This is expressed in detail in the :ref:`editing pages <armature-bone-"
"chain-edit>`, but here is a quick look at this important feature."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:69
msgid ""
"The Armature Bones panel with two bones selected, and their Child of "
"settings highlighted."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:72
msgid ""
"The easiest way to manage bones relationships is to use the *Relations* "
"panel *Bone* tab:"
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:74
msgid ""
"First, :doc:`select </rigging/armatures/bones/selecting>` the bones you "
"want to edit (selection order does not matter here)."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:76
msgid ""
"To *parent* a bone to another one, select the name of this parent in its "
"drop-down *Parent* list."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:77
msgid ""
"To *unparent* a bone, just select the void entry in the same *Parent* "
"list."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:78
msgid "To *connect* a bone to its parent, enable its small *Con* button."
msgstr ""

#: ../../manual/rigging/armatures/structure.rst:79
msgid "To *unconnect* a bone, disable its *Con* button."
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid ""
#~ "Chains of bones are a particularly "
#~ "important topic in :doc:`posing "
#~ "</rigging/posing/index>` (especially with the "
#~ "standard *forward kinematics* versus "
#~ "\"automatic\" *inverse kinematics* posing "
#~ "techniques). You create/edit them in "
#~ "*Edit Mode*, but except in case of"
#~ " connected bones, their relationships have"
#~ " no effect on bone transformations in"
#~ " this mode (i.e. transforming a "
#~ "parent bone won't affect its children)."
#~ msgstr ""

#~ msgid ""
#~ "This is expressed in detail in the"
#~ " :ref:`editing pages <armature-bone_chain_edit>`,"
#~ " but here is a quick look at"
#~ " this important feature."
#~ msgstr ""

