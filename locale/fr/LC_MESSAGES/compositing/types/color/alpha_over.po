#
# phan <phahoatho@gmail.com>, 2017.
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 2.76\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-17 01:30+0200\n"
"PO-Revision-Date: 2017-12-06 19:05+0100\n"
"Last-Translator: phan <phahoatho@gmail.com>\n"
"Language-Team: français <bf-docboard@blender.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../manual/compositing/types/color/alpha_over.rst:6
msgid "Alpha Over Node"
msgstr "Node Alpha Over"

#: ../../manual/compositing/types/color/alpha_over.rst:11
msgid "Alpha Over Node."
msgstr "Node Alpha Over."

#: ../../manual/compositing/types/color/alpha_over.rst:13
#, fuzzy
msgid ""
"The *Alpha Over* node is used to layer images on top of one another. "
"Alpha Over does not work on the colors of an image."
msgstr ""
"Le *Node Alpha Over* est utilisé pour disposer les images les unes au "
"dessus des autres. Le Node Alpha Over ne fonctionne pas sur les couleurs "
"d'une image."

#: ../../manual/compositing/types/color/alpha_over.rst:18
msgid "Inputs"
msgstr "Entrées"

#: ../../manual/compositing/types/color/alpha_over.rst:20
msgid "Factor"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:21
msgid "Controls the amount of influence the node exerts on the output image."
msgstr "Contre le niveau d'influence que le node exerce sur l'image de sortie."

#: ../../manual/compositing/types/color/alpha_over.rst:22
#: ../../manual/compositing/types/color/alpha_over.rst:27
#: ../../manual/compositing/types/color/alpha_over.rst:43
msgid "Image"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:23
msgid "The background image."
msgstr "L'image d'arrière-plan."

#: ../../manual/compositing/types/color/alpha_over.rst:25
msgid ""
"The foreground image. Where the image pixels has an alpha greater than 0,"
" the background image will be overlaid."
msgstr ""
"L'image d'avant-plan. Là oû les pixels de l'image ont un alpha supérieur "
"à 0. l'image d'arrière-plan sera recouverte."

#: ../../manual/compositing/types/color/alpha_over.rst:30
msgid "Properties"
msgstr "Propriétés"

#: ../../manual/compositing/types/color/alpha_over.rst:32
msgid "Convert Premultiplied"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:33
msgid "`Strange Halos or Outlines`_."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:36
msgid "Premultiply"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:35
#, fuzzy
msgid "Mix Factor. See :term:`Alpha Channel`."
msgstr "Facteur de mélange. Voir :term:`Alpha Channel`."

#: ../../manual/compositing/types/color/alpha_over.rst:39
msgid "Outputs"
msgstr "Sorties"

#: ../../manual/compositing/types/color/alpha_over.rst:42
msgid "Standard image output."
msgstr "Sortie image atandard."

#: ../../manual/compositing/types/color/alpha_over.rst:46
msgid "Strange Halos or Outlines"
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:48
msgid ""
"This section clarifies the functionality of the premultiplied alpha "
"button. An alpha channel has a value of between 0 and 1. To make an image"
" transparent (to composite it over another one), the RGB pixel values are"
" multiplied by the alpha values (making the image transparent (0) where "
"the alpha is black (0), and opaque (1) where it is white (1))."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:55
msgid ""
"To composite image A over image B, the alpha of image A gets multiplied "
"by image A, thus making the image part of A opaque and the rest "
"transparent. Then the alpha channel of A is inverted and multiplied by "
"image B, thus making image B transparent, where A is opaque and vice "
"versa. To get the final composite the resultant images are added."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:61
msgid ""
"A premultiplied alpha is, when the image (RGB) pixels are already "
"multiplied by the alpha channel, therefore, the above compositing "
"operation does not work too well, and *Convert Premultiplied* has to be "
"enabled. This is only an issue in semitransparent area and edges usually."
" The issue normally occurs in a node setup, in which two images "
"previously combined with alpha, then are combined again with yet another "
"image. The previously combined image was already multiplied "
"(premultiplied) and needs to be converted as such (hence, *Convert "
"PreMul*)."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:72
msgid ""
"If multiplied twice artifacts like a white or clear halo occur around "
"where the image meet, since the alpha value is being squared or cubed. It"
" also depends on whether or not the image has been rendered as a "
"premultiplied, or as a straight RGBA image."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:79
msgid "Examples"
msgstr "Exemples"

#: ../../manual/compositing/types/color/alpha_over.rst:81
msgid ""
"In this example, an image of a Cube is superimposed on a cliff "
"background. Use the PreMultiply button, when the foreground image and "
"background images have a combined Alpha that is greater than 1.00; "
"otherwise, you will see an unwanted halo effect. The resulting image is a"
" composite of the two source images."
msgstr ""
"Dans cet exemple, l'image d'un Cube est superposée sur un arrière-plan  ."
" Utilisez le bouton *PreMultiply*, quand l'image d'avant-plan et les "
"images d'arrière-plan ont u n alpha combiné qui est supérieur à 1.00 ; "
"sinon, vous verrez un effet d'halo indésirable. l'image résultante est un"
" composite des deux images sources."

#: ../../manual/compositing/types/color/alpha_over.rst:91
#, fuzzy
msgid "Assembling a composite image using Alpha Over."
msgstr "Assembler une image composite en utilisant *Alpha Over*. "

#: ../../manual/compositing/types/color/alpha_over.rst:96
msgid "Animated see-through/sheer SFX using Alpha Over on frame 11."
msgstr ""

#: ../../manual/compositing/types/color/alpha_over.rst:98
msgid ""
"In this example, we use the Factor control to make a sheer cloth or "
"onion-skin effect. This effect can be animated, allowing the observer to "
"\"see-through\" walls (or any foreground object) by hooking up a Time "
"node to feed the Factor socket as shown below. In this example, over the "
"course of 30 frames, the Time node makes the Alpha Over node produce a "
"picture that starts with the background cliff image, and slowly bleeds "
"through the cube. This example shows frame 11 just as the cube starts to "
"be revealed."
msgstr ""

#~ msgid ""
#~ "This section clarifies the functionality "
#~ "of premultiplied-alpha button. An alpha"
#~ " channel has a value of between "
#~ "0 and 1. To make an image "
#~ "transparent (to composite it over "
#~ "another one), the RGB pixel values "
#~ "are multiplied by the alpha values "
#~ "(making the image transparent (0) where"
#~ " the alpha is black (0), and "
#~ "opaque (1) where it is white (1))."
#~ msgstr ""

#~ msgid ""
#~ "A pre-multiplied alpha is, when "
#~ "the image (RGB) pixels are already "
#~ "multiplied by the alpha channel, "
#~ "therefore, the above compositing operation "
#~ "does not work too well, and "
#~ "*Convert Premultiplied* has to be "
#~ "enabled. This is only an issue in"
#~ " semi-transparent area and edges "
#~ "usually. The issue normally occurs in"
#~ " a node setup, in which two "
#~ "images previously combined with alpha, "
#~ "then are combined again with yet "
#~ "another image. The previously combined "
#~ "image was already multiplied (pre-"
#~ "multiplied) and needs to be converted"
#~ " as such (hence, *Convert PreMul*)."
#~ msgstr ""

#~ msgid "Animated See-Through/Sheer SFX using Alpha Over on Frame 11."
#~ msgstr ""

